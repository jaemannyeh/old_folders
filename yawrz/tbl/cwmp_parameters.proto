package yawrz;
message Parameter {
	required string name = 1;
	optional string value = 2;
}
message Device { // 0 // Device.
	optional string RootDataModelVersion = 1;
	optional string InterfaceStackNumberOfEntries = 2;
	message Services { // 1 // Device.Services.
	} // 1 // Device.Services.
	optional Services services = 4; // 1
	message DeviceInfo { // 1 // Device.DeviceInfo.
		optional string DeviceCategory = 1;
		optional string Manufacturer = 2;
		optional string ManufacturerOUI = 3;
		optional string ModelName = 4;
		optional string ModelNumber = 5;
		optional string Description = 6;
		optional string ProductClass = 7;
		optional string SerialNumber = 8;
		optional string HardwareVersion = 9;
		optional string SoftwareVersion = 10;
		optional string AdditionalHardwareVersion = 11;
		optional string AdditionalSoftwareVersion = 12;
		optional string ProvisioningCode = 13;
		optional string UpTime = 14;
		optional string FirstUseDate = 15;
		optional string VendorConfigFileNumberOfEntries = 16;
		optional string SupportedDataModelNumberOfEntries = 17;
		optional string ProcessorNumberOfEntries = 18;
		optional string VendorLogFileNumberOfEntries = 19;
		optional string LocationNumberOfEntries = 20;
		message VendorConfigFile { // 2 // Device.DeviceInfo.VendorConfigFile.{i}.
			optional string Alias = 1;
			optional string Name = 2;
			optional string Version = 3;
			optional string Date = 4;
			optional string Description = 5;
			optional string UseForBackupRestore = 6;
		} // 2 // Device.DeviceInfo.VendorConfigFile.{i}.
		repeated VendorConfigFile vendorConfigFile = 22; // 2
		message SupportedDataModel { // 2 // Device.DeviceInfo.SupportedDataModel.{i}.
			optional string Alias = 1;
			optional string URL = 2;
			optional string UUID = 3;
			optional string URN = 4;
			optional string Features = 5;
		} // 2 // Device.DeviceInfo.SupportedDataModel.{i}.
		repeated SupportedDataModel supportedDataModel = 23; // 2
		message MemoryStatus { // 2 // Device.DeviceInfo.MemoryStatus.
			optional string Total = 1;
			optional string Free = 2;
		} // 2 // Device.DeviceInfo.MemoryStatus.
		optional MemoryStatus memoryStatus = 24; // 2
		message ProcessStatus { // 2 // Device.DeviceInfo.ProcessStatus.
			optional string CPUUsage = 1;
			optional string ProcessNumberOfEntries = 2;
			message Process { // 3 // Device.DeviceInfo.ProcessStatus.Process.{i}.
				optional string PID = 1;
				optional string Command = 2;
				optional string Size = 3;
				optional string Priority = 4;
				optional string CPUTime = 5;
				optional string State = 6;
			} // 3 // Device.DeviceInfo.ProcessStatus.Process.{i}.
			repeated Process process = 4; // 3
		} // 2 // Device.DeviceInfo.ProcessStatus.
		optional ProcessStatus processStatus = 25; // 2
		message TemperatureStatus { // 2 // Device.DeviceInfo.TemperatureStatus.
			optional string TemperatureSensorNumberOfEntries = 1;
			message TemperatureSensor { // 3 // Device.DeviceInfo.TemperatureStatus.TemperatureSensor.{i}.
				optional string Alias = 1;
				optional string Enable = 2;
				optional string Status = 3;
				optional string Reset = 4;
				optional string ResetTime = 5;
				optional string Name = 6;
				optional string Value = 7;
				optional string LastUpdate = 8;
				optional string MinValue = 9;
				optional string MinTime = 10;
				optional string MaxValue = 11;
				optional string MaxTime = 12;
				optional string LowAlarmValue = 13;
				optional string LowAlarmTime = 14;
				optional string HighAlarmValue = 15;
				optional string PollingInterval = 16;
				optional string HighAlarmTime = 17;
			} // 3 // Device.DeviceInfo.TemperatureStatus.TemperatureSensor.{i}.
			repeated TemperatureSensor temperatureSensor = 3; // 3
		} // 2 // Device.DeviceInfo.TemperatureStatus.
		optional TemperatureStatus temperatureStatus = 26; // 2
		message NetworkProperties { // 2 // Device.DeviceInfo.NetworkProperties.
			optional string MaxTCPWindowSize = 1;
			optional string TCPImplementation = 2;
		} // 2 // Device.DeviceInfo.NetworkProperties.
		optional NetworkProperties networkProperties = 27; // 2
		message Processor { // 2 // Device.DeviceInfo.Processor.{i}.
			optional string Alias = 1;
			optional string Architecture = 2;
		} // 2 // Device.DeviceInfo.Processor.{i}.
		repeated Processor processor = 28; // 2
		message VendorLogFile { // 2 // Device.DeviceInfo.VendorLogFile.{i}.
			optional string Alias = 1;
			optional string Name = 2;
			optional string MaximumSize = 3;
			optional string Persistent = 4;
		} // 2 // Device.DeviceInfo.VendorLogFile.{i}.
		repeated VendorLogFile vendorLogFile = 29; // 2
		message ProxierInfo { // 2 // Device.DeviceInfo.ProxierInfo.
			optional string ManufacturerOUI = 1;
			optional string ProductClass = 2;
			optional string SerialNumber = 3;
			optional string ProxyProtocol = 4;
		} // 2 // Device.DeviceInfo.ProxierInfo.
		optional ProxierInfo proxierInfo = 30; // 2
		message Location { // 2 // Device.DeviceInfo.Location.{i}.
			optional string Source = 1;
			optional string AcquiredTime = 2;
			optional string ExternalSource = 3;
			optional string ExternalProtocol = 4;
			optional string DataObject = 5;
		} // 2 // Device.DeviceInfo.Location.{i}.
		repeated Location location = 31; // 2
	} // 1 // Device.DeviceInfo.
	optional DeviceInfo deviceInfo = 5; // 1
	message ManagementServer { // 1 // Device.ManagementServer.
		optional string EnableCWMP = 1;
		optional string URL = 2;
		optional string Username = 3;
		optional string Password = 4;
		optional string ScheduleReboot = 5;
		optional string DelayReboot = 6;
		optional string PeriodicInformEnable = 7;
		optional string PeriodicInformInterval = 8;
		optional string PeriodicInformTime = 9;
		optional string ParameterKey = 10;
		optional string ConnectionRequestURL = 11;
		optional string ConnectionRequestUsername = 12;
		optional string ConnectionRequestPassword = 13;
		optional string UpgradesManaged = 14;
		optional string KickURL = 15;
		optional string DownloadProgressURL = 16;
		optional string DefaultActiveNotificationThrottle = 17;
		optional string CWMPRetryMinimumWaitInterval = 18;
		optional string CWMPRetryIntervalMultiplier = 19;
		optional string UDPConnectionRequestAddress = 20;
		optional string STUNEnable = 21;
		optional string STUNServerAddress = 22;
		optional string STUNServerPort = 23;
		optional string STUNUsername = 24;
		optional string STUNPassword = 25;
		optional string STUNMaximumKeepAlivePeriod = 26;
		optional string STUNMinimumKeepAlivePeriod = 27;
		optional string NATDetected = 28;
		optional string AliasBasedAddressing = 29;
		optional string InstanceMode = 30;
		optional string AutoCreateInstances = 31;
		optional string ManageableDeviceNumberOfEntries = 32;
		optional string ManageableDeviceNotificationLimit = 33;
		optional string EmbeddedDeviceNumberOfEntries = 34;
		optional string VirtualDeviceNumberOfEntries = 35;
		optional string SupportedConnReqMethods = 36;
		optional string ConnReqXMPPConnection = 37;
		optional string ConnReqAllowedJabberIDs = 38;
		optional string ConnReqJabberID = 39;
		optional string HTTPCompressionSupported = 40;
		optional string HTTPCompression = 41;
		optional string LightweightNotificationProtocolsSupported = 42;
		optional string LightweightNotificationProtocolsUsed = 43;
		optional string UDPLightweightNotificationHost = 44;
		optional string UDPLightweightNotificationPort = 45;
		optional string InformParameterNumberOfEntries = 46;
		message ManageableDevice { // 2 // Device.ManagementServer.ManageableDevice.{i}.
			optional string Alias = 1;
			optional string ManufacturerOUI = 2;
			optional string SerialNumber = 3;
			optional string ProductClass = 4;
			optional string Host = 5;
		} // 2 // Device.ManagementServer.ManageableDevice.{i}.
		repeated ManageableDevice manageableDevice = 48; // 2
		message AutonomousTransferCompletePolicy { // 2 // Device.ManagementServer.AutonomousTransferCompletePolicy.
			optional string Enable = 1;
			optional string TransferTypeFilter = 2;
			optional string ResultTypeFilter = 3;
			optional string FileTypeFilter = 4;
		} // 2 // Device.ManagementServer.AutonomousTransferCompletePolicy.
		optional AutonomousTransferCompletePolicy autonomousTransferCompletePolicy = 49; // 2
		message DownloadAvailability { // 2 // Device.ManagementServer.DownloadAvailability.
			message Announcement { // 3 // Device.ManagementServer.DownloadAvailability.Announcement.
				optional string Enable = 1;
				optional string Status = 2;
				optional string GroupNumberOfEntries = 3;
				message Group { // 4 // Device.ManagementServer.DownloadAvailability.Announcement.Group.{i}.
					optional string Alias = 1;
					optional string Enable = 2;
					optional string Status = 3;
					optional string URL = 4;
				} // 4 // Device.ManagementServer.DownloadAvailability.Announcement.Group.{i}.
				repeated Group group = 5; // 4
			} // 3 // Device.ManagementServer.DownloadAvailability.Announcement.
			optional Announcement announcement = 2; // 3
			message Query { // 3 // Device.ManagementServer.DownloadAvailability.Query.
				optional string Enable = 1;
				optional string Status = 2;
				optional string URL = 3;
			} // 3 // Device.ManagementServer.DownloadAvailability.Query.
			optional Query query = 3; // 3
		} // 2 // Device.ManagementServer.DownloadAvailability.
		optional DownloadAvailability downloadAvailability = 50; // 2
		message DUStateChangeComplPolicy { // 2 // Device.ManagementServer.DUStateChangeComplPolicy.
			optional string Enable = 1;
			optional string OperationTypeFilter = 2;
			optional string ResultTypeFilter = 3;
			optional string FaultCodeFilter = 4;
		} // 2 // Device.ManagementServer.DUStateChangeComplPolicy.
		optional DUStateChangeComplPolicy dUStateChangeComplPolicy = 51; // 2
		message EmbeddedDevice { // 2 // Device.ManagementServer.EmbeddedDevice.{i}.
			optional string ControllerID = 1;
			optional string ProxiedDeviceID = 2;
			optional string Reference = 3;
			optional string SupportedDataModel = 4;
			optional string Host = 5;
			optional string ProxyProtocol = 6;
			optional string ProxyProtocolReference = 7;
			optional string DiscoveryProtocol = 8;
			optional string DiscoveryProtocolReference = 9;
			optional string CommandProcessed = 10;
			optional string CommandProcessingErrMsg = 11;
			optional string LastSyncTime = 12;
		} // 2 // Device.ManagementServer.EmbeddedDevice.{i}.
		repeated EmbeddedDevice embeddedDevice = 52; // 2
		message VirtualDevice { // 2 // Device.ManagementServer.VirtualDevice.{i}.
			optional string ManufacturerOUI = 1;
			optional string ProductClass = 2;
			optional string SerialNumber = 3;
			optional string Host = 4;
			optional string ProxyProtocol = 5;
			optional string ProxyProtocolReference = 6;
			optional string DiscoveryProtocol = 7;
			optional string DiscoveryProtocolReference = 8;
		} // 2 // Device.ManagementServer.VirtualDevice.{i}.
		repeated VirtualDevice virtualDevice = 53; // 2
		message StandbyPolicy { // 2 // Device.ManagementServer.StandbyPolicy.
			optional string CRUnawarenessMaxDuration = 1;
			optional string MaxMissedPeriodic = 2;
			optional string NotifyMissedScheduled = 3;
			optional string NetworkAwarenessCapable = 4;
			optional string SelfTimerCapable = 5;
			optional string CRAwarenessRequested = 6;
			optional string PeriodicAwarenessRequested = 7;
			optional string ScheduledAwarenessRequested = 8;
		} // 2 // Device.ManagementServer.StandbyPolicy.
		optional StandbyPolicy standbyPolicy = 54; // 2
		message InformParameter { // 2 // Device.ManagementServer.InformParameter.{i}.
			optional string Enable = 1;
			optional string Alias = 2;
			optional string ParameterName = 3;
			optional string EventList = 4;
		} // 2 // Device.ManagementServer.InformParameter.{i}.
		repeated InformParameter informParameter = 55; // 2
	} // 1 // Device.ManagementServer.
	optional ManagementServer managementServer = 6; // 1
	message GatewayInfo { // 1 // Device.GatewayInfo.
		optional string ManufacturerOUI = 1;
		optional string ProductClass = 2;
		optional string SerialNumber = 3;
	} // 1 // Device.GatewayInfo.
	optional GatewayInfo gatewayInfo = 7; // 1
	message Time { // 1 // Device.Time.
		optional string Enable = 1;
		optional string Status = 2;
		optional string NTPServer1 = 3;
		optional string NTPServer2 = 4;
		optional string NTPServer3 = 5;
		optional string NTPServer4 = 6;
		optional string NTPServer5 = 7;
		optional string CurrentLocalTime = 8;
		optional string LocalTimeZone = 9;
	} // 1 // Device.Time.
	optional Time time = 8; // 1
	message UserInterface { // 1 // Device.UserInterface.
		optional string PasswordRequired = 1;
		optional string PasswordUserSelectable = 2;
		optional string PasswordReset = 3;
		optional string UpgradeAvailable = 4;
		optional string WarrantyDate = 5;
		optional string ISPName = 6;
		optional string ISPHelpDesk = 7;
		optional string ISPHomePage = 8;
		optional string ISPHelpPage = 9;
		optional string ISPLogo = 10;
		optional string ISPLogoSize = 11;
		optional string ISPMailServer = 12;
		optional string ISPNewsServer = 13;
		optional string TextColor = 14;
		optional string BackgroundColor = 15;
		optional string ButtonColor = 16;
		optional string ButtonTextColor = 17;
		optional string AutoUpdateServer = 18;
		optional string UserUpdateServer = 19;
		optional string AvailableLanguages = 20;
		optional string CurrentLanguage = 21;
		message RemoteAccess { // 2 // Device.UserInterface.RemoteAccess.
			optional string Enable = 1;
			optional string Port = 2;
			optional string SupportedProtocols = 3;
			optional string Protocol = 4;
		} // 2 // Device.UserInterface.RemoteAccess.
		optional RemoteAccess remoteAccess = 23; // 2
		message LocalDisplay { // 2 // Device.UserInterface.LocalDisplay.
			optional string Movable = 1;
			optional string Resizable = 2;
			optional string PosX = 3;
			optional string PosY = 4;
			optional string Width = 5;
			optional string Height = 6;
			optional string DisplayWidth = 7;
			optional string DisplayHeight = 8;
		} // 2 // Device.UserInterface.LocalDisplay.
		optional LocalDisplay localDisplay = 24; // 2
	} // 1 // Device.UserInterface.
	optional UserInterface userInterface = 9; // 1
	message InterfaceStack { // 1 // Device.InterfaceStack.{i}.
		optional string Alias = 1;
		optional string HigherLayer = 2;
		optional string LowerLayer = 3;
		optional string HigherAlias = 4;
		optional string LowerAlias = 5;
	} // 1 // Device.InterfaceStack.{i}.
	repeated InterfaceStack interfaceStack = 10; // 1
	message DSL { // 1 // Device.DSL.
		optional string LineNumberOfEntries = 1;
		optional string ChannelNumberOfEntries = 2;
		optional string BondingGroupNumberOfEntries = 3;
		message Line { // 2 // Device.DSL.Line.{i}.
			optional string Enable = 1;
			optional string EnableDataGathering = 2;
			optional string Status = 3;
			optional string Alias = 4;
			optional string Name = 5;
			optional string LastChange = 6;
			optional string LowerLayers = 7;
			optional string Upstream = 8;
			optional string FirmwareVersion = 9;
			optional string LinkStatus = 10;
			optional string StandardsSupported = 11;
			optional string XTSE = 12;
			optional string StandardUsed = 13;
			optional string XTSUsed = 14;
			optional string LineEncoding = 15;
			optional string AllowedProfiles = 16;
			optional string CurrentProfile = 17;
			optional string PowerManagementState = 18;
			optional string SuccessFailureCause = 19;
			optional string UPBOKLER = 20;
			optional string UPBOKLEPb = 21;
			optional string UPBOKLERPb = 22;
			optional string RXTHRSHds = 23;
			optional string ACTRAMODEds = 24;
			optional string ACTRAMODEus = 25;
			optional string ACTINPROCds = 26;
			optional string ACTINPROCus = 27;
			optional string SNRMROCds = 28;
			optional string SNRMROCus = 29;
			optional string LastStateTransmittedDownstream = 30;
			optional string LastStateTransmittedUpstream = 31;
			optional string UPBOKLE = 32;
			optional string MREFPSDds = 33;
			optional string MREFPSDus = 34;
			optional string LIMITMASK = 35;
			optional string US0MASK = 36;
			optional string TRELLISds = 37;
			optional string TRELLISus = 38;
			optional string ACTSNRMODEds = 39;
			optional string ACTSNRMODEus = 40;
			optional string VirtualNoisePSDds = 41;
			optional string VirtualNoisePSDus = 42;
			optional string ACTUALCE = 43;
			optional string LineNumber = 44;
			optional string UpstreamMaxBitRate = 45;
			optional string DownstreamMaxBitRate = 46;
			optional string UpstreamNoiseMargin = 47;
			optional string DownstreamNoiseMargin = 48;
			optional string SNRMpbus = 49;
			optional string SNRMpbds = 50;
			optional string INMIATOds = 51;
			optional string INMIATSds = 52;
			optional string INMCCds = 53;
			optional string INMINPEQMODEds = 54;
			optional string UpstreamAttenuation = 55;
			optional string DownstreamAttenuation = 56;
			optional string UpstreamPower = 57;
			optional string DownstreamPower = 58;
			optional string XTURVendor = 59;
			optional string XTURCountry = 60;
			optional string XTURANSIStd = 61;
			optional string XTURANSIRev = 62;
			optional string XTUCVendor = 63;
			optional string XTUCCountry = 64;
			optional string XTUCANSIStd = 65;
			optional string XTUCANSIRev = 66;
			message DataGathering { // 3 // Device.DSL.Line.{i}.DataGathering.
				optional string LoggingDepthR = 1;
				optional string ActLoggingDepthReportingR = 2;
				optional string EventTraceBufferR = 3;
			} // 3 // Device.DSL.Line.{i}.DataGathering.
			optional DataGathering dataGathering = 68; // 3
			message Stats { // 3 // Device.DSL.Line.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string DiscardPacketsSent = 7;
				optional string DiscardPacketsReceived = 8;
				optional string TotalStart = 9;
				optional string ShowtimeStart = 10;
				optional string LastShowtimeStart = 11;
				optional string CurrentDayStart = 12;
				optional string QuarterHourStart = 13;
				message Total { // 4 // Device.DSL.Line.{i}.Stats.Total.
					optional string ErroredSecs = 1;
					optional string SeverelyErroredSecs = 2;
				} // 4 // Device.DSL.Line.{i}.Stats.Total.
				optional Total total = 15; // 4
				message Showtime { // 4 // Device.DSL.Line.{i}.Stats.Showtime.
					optional string ErroredSecs = 1;
					optional string SeverelyErroredSecs = 2;
				} // 4 // Device.DSL.Line.{i}.Stats.Showtime.
				optional Showtime showtime = 16; // 4
				message LastShowtime { // 4 // Device.DSL.Line.{i}.Stats.LastShowtime.
					optional string ErroredSecs = 1;
					optional string SeverelyErroredSecs = 2;
				} // 4 // Device.DSL.Line.{i}.Stats.LastShowtime.
				optional LastShowtime lastShowtime = 17; // 4
				message CurrentDay { // 4 // Device.DSL.Line.{i}.Stats.CurrentDay.
					optional string ErroredSecs = 1;
					optional string SeverelyErroredSecs = 2;
				} // 4 // Device.DSL.Line.{i}.Stats.CurrentDay.
				optional CurrentDay currentDay = 18; // 4
				message QuarterHour { // 4 // Device.DSL.Line.{i}.Stats.QuarterHour.
					optional string ErroredSecs = 1;
					optional string SeverelyErroredSecs = 2;
				} // 4 // Device.DSL.Line.{i}.Stats.QuarterHour.
				optional QuarterHour quarterHour = 19; // 4
			} // 3 // Device.DSL.Line.{i}.Stats.
			optional Stats stats = 69; // 3
			message TestParams { // 3 // Device.DSL.Line.{i}.TestParams.
				optional string HLOGGds = 1;
				optional string HLOGGus = 2;
				optional string HLOGpsds = 3;
				optional string HLOGpsus = 4;
				optional string HLOGMTds = 5;
				optional string HLOGMTus = 6;
				optional string QLNGds = 7;
				optional string QLNGus = 8;
				optional string QLNpsds = 9;
				optional string QLNpsus = 10;
				optional string QLNMTds = 11;
				optional string QLNMTus = 12;
				optional string SNRGds = 13;
				optional string SNRGus = 14;
				optional string SNRpsds = 15;
				optional string SNRpsus = 16;
				optional string SNRMTds = 17;
				optional string SNRMTus = 18;
				optional string LATNds = 19;
				optional string LATNus = 20;
				optional string SATNds = 21;
				optional string SATNus = 22;
			} // 3 // Device.DSL.Line.{i}.TestParams.
			optional TestParams testParams = 70; // 3
		} // 2 // Device.DSL.Line.{i}.
		repeated Line line = 5; // 2
		message Channel { // 2 // Device.DSL.Channel.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string LinkEncapsulationSupported = 7;
			optional string LinkEncapsulationUsed = 8;
			optional string LPATH = 9;
			optional string INTLVDEPTH = 10;
			optional string INTLVBLOCK = 11;
			optional string ActualInterleavingDelay = 12;
			optional string ACTINP = 13;
			optional string INPREPORT = 14;
			optional string NFEC = 15;
			optional string RFEC = 16;
			optional string LSYMB = 17;
			optional string UpstreamCurrRate = 18;
			optional string DownstreamCurrRate = 19;
			optional string ACTNDR = 20;
			optional string ACTINPREIN = 21;
			message Stats { // 3 // Device.DSL.Channel.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string DiscardPacketsSent = 7;
				optional string DiscardPacketsReceived = 8;
				optional string TotalStart = 9;
				optional string ShowtimeStart = 10;
				optional string LastShowtimeStart = 11;
				optional string CurrentDayStart = 12;
				optional string QuarterHourStart = 13;
				message Total { // 4 // Device.DSL.Channel.{i}.Stats.Total.
					optional string XTURFECErrors = 1;
					optional string XTUCFECErrors = 2;
					optional string XTURHECErrors = 3;
					optional string XTUCHECErrors = 4;
					optional string XTURCRCErrors = 5;
					optional string XTUCCRCErrors = 6;
				} // 4 // Device.DSL.Channel.{i}.Stats.Total.
				optional Total total = 15; // 4
				message Showtime { // 4 // Device.DSL.Channel.{i}.Stats.Showtime.
					optional string XTURFECErrors = 1;
					optional string XTUCFECErrors = 2;
					optional string XTURHECErrors = 3;
					optional string XTUCHECErrors = 4;
					optional string XTURCRCErrors = 5;
					optional string XTUCCRCErrors = 6;
				} // 4 // Device.DSL.Channel.{i}.Stats.Showtime.
				optional Showtime showtime = 16; // 4
				message LastShowtime { // 4 // Device.DSL.Channel.{i}.Stats.LastShowtime.
					optional string XTURFECErrors = 1;
					optional string XTUCFECErrors = 2;
					optional string XTURHECErrors = 3;
					optional string XTUCHECErrors = 4;
					optional string XTURCRCErrors = 5;
					optional string XTUCCRCErrors = 6;
				} // 4 // Device.DSL.Channel.{i}.Stats.LastShowtime.
				optional LastShowtime lastShowtime = 17; // 4
				message CurrentDay { // 4 // Device.DSL.Channel.{i}.Stats.CurrentDay.
					optional string XTURFECErrors = 1;
					optional string XTUCFECErrors = 2;
					optional string XTURHECErrors = 3;
					optional string XTUCHECErrors = 4;
					optional string XTURCRCErrors = 5;
					optional string XTUCCRCErrors = 6;
				} // 4 // Device.DSL.Channel.{i}.Stats.CurrentDay.
				optional CurrentDay currentDay = 18; // 4
				message QuarterHour { // 4 // Device.DSL.Channel.{i}.Stats.QuarterHour.
					optional string XTURFECErrors = 1;
					optional string XTUCFECErrors = 2;
					optional string XTURHECErrors = 3;
					optional string XTUCHECErrors = 4;
					optional string XTURCRCErrors = 5;
					optional string XTUCCRCErrors = 6;
				} // 4 // Device.DSL.Channel.{i}.Stats.QuarterHour.
				optional QuarterHour quarterHour = 19; // 4
			} // 3 // Device.DSL.Channel.{i}.Stats.
			optional Stats stats = 23; // 3
		} // 2 // Device.DSL.Channel.{i}.
		repeated Channel channel = 6; // 2
		message BondingGroup { // 2 // Device.DSL.BondingGroup.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string GroupStatus = 7;
			optional string GroupID = 8;
			optional string BondSchemesSupported = 9;
			optional string BondScheme = 10;
			optional string GroupCapacity = 11;
			optional string RunningTime = 12;
			optional string TargetUpRate = 13;
			optional string TargetDownRate = 14;
			optional string ThreshLowUpRate = 15;
			optional string ThreshLowDownRate = 16;
			optional string UpstreamDifferentialDelayTolerance = 17;
			optional string DownstreamDifferentialDelayTolerance = 18;
			optional string BondedChannelNumberOfEntries = 19;
			message BondedChannel { // 3 // Device.DSL.BondingGroup.{i}.BondedChannel.{i}.
				optional string Alias = 1;
				optional string Channel = 2;
				message Ethernet { // 4 // Device.DSL.BondingGroup.{i}.BondedChannel.{i}.Ethernet.
					message Stats { // 5 // Device.DSL.BondingGroup.{i}.BondedChannel.{i}.Ethernet.Stats.
						optional string UnderflowErrorsSent = 1;
						optional string CRCErrorsReceived = 2;
						optional string AlignmentErrorsReceived = 3;
						optional string ShortPacketsReceived = 4;
						optional string LongPacketsReceived = 5;
						optional string OverflowErrorsReceived = 6;
						optional string PauseFramesReceived = 7;
						optional string FramesDropped = 8;
					} // 5 // Device.DSL.BondingGroup.{i}.BondedChannel.{i}.Ethernet.Stats.
					optional Stats stats = 2; // 5
				} // 4 // Device.DSL.BondingGroup.{i}.BondedChannel.{i}.Ethernet.
				optional Ethernet ethernet = 4; // 4
			} // 3 // Device.DSL.BondingGroup.{i}.BondedChannel.{i}.
			repeated BondedChannel bondedChannel = 21; // 3
			message Stats { // 3 // Device.DSL.BondingGroup.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string UnicastPacketsSent = 7;
				optional string UnicastPacketsReceived = 8;
				optional string DiscardPacketsSent = 9;
				optional string DiscardPacketsReceived = 10;
				optional string MulticastPacketsSent = 11;
				optional string MulticastPacketsReceived = 12;
				optional string BroadcastPacketsSent = 13;
				optional string BroadcastPacketsReceived = 14;
				optional string UnknownProtoPacketsReceived = 15;
				optional string TotalStart = 16;
				optional string CurrentDayStart = 17;
				optional string QuarterHourStart = 18;
				message Total { // 4 // Device.DSL.BondingGroup.{i}.Stats.Total.
					optional string FailureReasons = 1;
					optional string UpstreamRate = 2;
					optional string DownstreamRate = 3;
					optional string UpstreamPacketLoss = 4;
					optional string DownstreamPacketLoss = 5;
					optional string UpstreamDifferentialDelay = 6;
					optional string DownstreamDifferentialDelay = 7;
					optional string FailureCount = 8;
					optional string ErroredSeconds = 9;
					optional string SeverelyErroredSeconds = 10;
					optional string UnavailableSeconds = 11;
				} // 4 // Device.DSL.BondingGroup.{i}.Stats.Total.
				optional Total total = 20; // 4
				message CurrentDay { // 4 // Device.DSL.BondingGroup.{i}.Stats.CurrentDay.
					optional string FailureReasons = 1;
					optional string UpstreamRate = 2;
					optional string DownstreamRate = 3;
					optional string UpstreamPacketLoss = 4;
					optional string DownstreamPacketLoss = 5;
					optional string UpstreamDifferentialDelay = 6;
					optional string DownstreamDifferentialDelay = 7;
					optional string FailureCount = 8;
					optional string ErroredSeconds = 9;
					optional string SeverelyErroredSeconds = 10;
					optional string UnavailableSeconds = 11;
				} // 4 // Device.DSL.BondingGroup.{i}.Stats.CurrentDay.
				optional CurrentDay currentDay = 21; // 4
				message QuarterHour { // 4 // Device.DSL.BondingGroup.{i}.Stats.QuarterHour.
					optional string FailureReasons = 1;
					optional string UpstreamRate = 2;
					optional string DownstreamRate = 3;
					optional string UpstreamPacketLoss = 4;
					optional string DownstreamPacketLoss = 5;
					optional string UpstreamDifferentialDelay = 6;
					optional string DownstreamDifferentialDelay = 7;
					optional string FailureCount = 8;
					optional string ErroredSeconds = 9;
					optional string SeverelyErroredSeconds = 10;
					optional string UnavailableSeconds = 11;
				} // 4 // Device.DSL.BondingGroup.{i}.Stats.QuarterHour.
				optional QuarterHour quarterHour = 22; // 4
			} // 3 // Device.DSL.BondingGroup.{i}.Stats.
			optional Stats stats = 22; // 3
			message Ethernet { // 3 // Device.DSL.BondingGroup.{i}.Ethernet.
				message Stats { // 4 // Device.DSL.BondingGroup.{i}.Ethernet.Stats.
					optional string PAFErrors = 1;
					optional string PAFSmallFragments = 2;
					optional string PAFLargeFragments = 3;
					optional string PAFBadFragments = 4;
					optional string PAFLostFragments = 5;
					optional string PAFLateFragments = 6;
					optional string PAFLostStarts = 7;
					optional string PAFLostEnds = 8;
					optional string PAFOverflows = 9;
					optional string PauseFramesSent = 10;
					optional string CRCErrorsReceived = 11;
					optional string AlignmentErrorsReceived = 12;
					optional string ShortPacketsReceived = 13;
					optional string LongPacketsReceived = 14;
					optional string OverflowErrorsReceived = 15;
					optional string FramesDropped = 16;
				} // 4 // Device.DSL.BondingGroup.{i}.Ethernet.Stats.
				optional Stats stats = 2; // 4
			} // 3 // Device.DSL.BondingGroup.{i}.Ethernet.
			optional Ethernet ethernet = 23; // 3
		} // 2 // Device.DSL.BondingGroup.{i}.
		repeated BondingGroup bondingGroup = 7; // 2
		message Diagnostics { // 2 // Device.DSL.Diagnostics.
			message ADSLLineTest { // 3 // Device.DSL.Diagnostics.ADSLLineTest.
				optional string DiagnosticsState = 1;
				optional string Interface = 2;
				optional string ACTPSDds = 3;
				optional string ACTPSDus = 4;
				optional string ACTATPds = 5;
				optional string ACTATPus = 6;
				optional string HLINSCds = 7;
				optional string HLINSCus = 8;
				optional string HLINGds = 9;
				optional string HLINGus = 10;
				optional string HLOGGds = 11;
				optional string HLOGGus = 12;
				optional string HLOGpsds = 13;
				optional string HLOGpsus = 14;
				optional string HLOGMTds = 15;
				optional string HLOGMTus = 16;
				optional string LATNpbds = 17;
				optional string LATNpbus = 18;
				optional string SATNds = 19;
				optional string SATNus = 20;
				optional string HLINpsds = 21;
				optional string HLINpsus = 22;
				optional string QLNGds = 23;
				optional string QLNGus = 24;
				optional string QLNpsds = 25;
				optional string QLNpsus = 26;
				optional string QLNMTds = 27;
				optional string QLNMTus = 28;
				optional string SNRGds = 29;
				optional string SNRGus = 30;
				optional string SNRpsds = 31;
				optional string SNRpsus = 32;
				optional string SNRMTds = 33;
				optional string SNRMTus = 34;
				optional string BITSpsds = 35;
				optional string BITSpsus = 36;
			} // 3 // Device.DSL.Diagnostics.ADSLLineTest.
			optional ADSLLineTest aDSLLineTest = 2; // 3
		} // 2 // Device.DSL.Diagnostics.
		optional Diagnostics diagnostics = 8; // 2
	} // 1 // Device.DSL.
	optional DSL dSL = 11; // 1
	message Optical { // 1 // Device.Optical.
		optional string InterfaceNumberOfEntries = 1;
		message Interface { // 2 // Device.Optical.Interface.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string Upstream = 7;
			optional string OpticalSignalLevel = 8;
			optional string LowerOpticalThreshold = 9;
			optional string UpperOpticalThreshold = 10;
			optional string TransmitOpticalLevel = 11;
			optional string LowerTransmitPowerThreshold = 12;
			optional string UpperTransmitPowerThreshold = 13;
			message Stats { // 3 // Device.Optical.Interface.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string DiscardPacketsSent = 7;
				optional string DiscardPacketsReceived = 8;
			} // 3 // Device.Optical.Interface.{i}.Stats.
			optional Stats stats = 15; // 3
		} // 2 // Device.Optical.Interface.{i}.
		repeated Interface interface = 3; // 2
	} // 1 // Device.Optical.
	optional Optical optical = 12; // 1
	message Cellular { // 1 // Device.Cellular.
		optional string RoamingEnabled = 1;
		optional string RoamingStatus = 2;
		optional string InterfaceNumberOfEntries = 3;
		optional string AccessPointNumberOfEntries = 4;
		message Interface { // 2 // Device.Cellular.Interface.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string Upstream = 7;
			optional string IMEI = 8;
			optional string SupportedAccessTechnologies = 9;
			optional string PreferredAccessTechnology = 10;
			optional string CurrentAccessTechnology = 11;
			optional string AvailableNetworks = 12;
			optional string NetworkRequested = 13;
			optional string NetworkInUse = 14;
			optional string RSSI = 15;
			optional string UpstreamMaxBitRate = 16;
			optional string DownstreamMaxBitRate = 17;
			message USIM { // 3 // Device.Cellular.Interface.{i}.USIM.
				optional string Status = 1;
				optional string IMSI = 2;
				optional string ICCID = 3;
				optional string MSISDN = 4;
				optional string PINCheck = 5;
				optional string PIN = 6;
			} // 3 // Device.Cellular.Interface.{i}.USIM.
			optional USIM uSIM = 19; // 3
			message Stats { // 3 // Device.Cellular.Interface.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string UnicastPacketsSent = 7;
				optional string UnicastPacketsReceived = 8;
				optional string DiscardPacketsSent = 9;
				optional string DiscardPacketsReceived = 10;
				optional string MulticastPacketsSent = 11;
				optional string MulticastPacketsReceived = 12;
				optional string BroadcastPacketsSent = 13;
				optional string BroadcastPacketsReceived = 14;
				optional string UnknownProtoPacketsReceived = 15;
			} // 3 // Device.Cellular.Interface.{i}.Stats.
			optional Stats stats = 20; // 3
		} // 2 // Device.Cellular.Interface.{i}.
		repeated Interface interface = 6; // 2
		message AccessPoint { // 2 // Device.Cellular.AccessPoint.{i}.
			optional string Enable = 1;
			optional string Alias = 2;
			optional string APN = 3;
			optional string Username = 4;
			optional string Password = 5;
			optional string Proxy = 6;
			optional string ProxyPort = 7;
			optional string Interface = 8;
		} // 2 // Device.Cellular.AccessPoint.{i}.
		repeated AccessPoint accessPoint = 7; // 2
	} // 1 // Device.Cellular.
	optional Cellular cellular = 13; // 1
	message ATM { // 1 // Device.ATM.
		optional string LinkNumberOfEntries = 1;
		message Link { // 2 // Device.ATM.Link.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string LinkType = 7;
			optional string AutoConfig = 8;
			optional string DestinationAddress = 9;
			optional string Encapsulation = 10;
			optional string FCSPreserved = 11;
			optional string VCSearchList = 12;
			optional string AAL = 13;
			message Stats { // 3 // Device.ATM.Link.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string UnicastPacketsSent = 7;
				optional string UnicastPacketsReceived = 8;
				optional string DiscardPacketsSent = 9;
				optional string DiscardPacketsReceived = 10;
				optional string MulticastPacketsSent = 11;
				optional string MulticastPacketsReceived = 12;
				optional string BroadcastPacketsSent = 13;
				optional string BroadcastPacketsReceived = 14;
				optional string UnknownProtoPacketsReceived = 15;
				optional string TransmittedBlocks = 16;
				optional string ReceivedBlocks = 17;
				optional string CRCErrors = 18;
				optional string HECErrors = 19;
			} // 3 // Device.ATM.Link.{i}.Stats.
			optional Stats stats = 15; // 3
			message QoS { // 3 // Device.ATM.Link.{i}.QoS.
				optional string QoSClass = 1;
				optional string PeakCellRate = 2;
				optional string MaximumBurstSize = 3;
				optional string SustainableCellRate = 4;
			} // 3 // Device.ATM.Link.{i}.QoS.
			optional QoS qoS = 16; // 3
		} // 2 // Device.ATM.Link.{i}.
		repeated Link link = 3; // 2
		message Diagnostics { // 2 // Device.ATM.Diagnostics.
			message F5Loopback { // 3 // Device.ATM.Diagnostics.F5Loopback.
				optional string DiagnosticsState = 1;
				optional string Interface = 2;
				optional string NumberOfRepetitions = 3;
				optional string Timeout = 4;
				optional string SuccessCount = 5;
				optional string FailureCount = 6;
				optional string AverageResponseTime = 7;
				optional string MinimumResponseTime = 8;
				optional string MaximumResponseTime = 9;
			} // 3 // Device.ATM.Diagnostics.F5Loopback.
			optional F5Loopback f5Loopback = 2; // 3
		} // 2 // Device.ATM.Diagnostics.
		optional Diagnostics diagnostics = 4; // 2
	} // 1 // Device.ATM.
	optional ATM aTM = 14; // 1
	message PTM { // 1 // Device.PTM.
		optional string LinkNumberOfEntries = 1;
		message Link { // 2 // Device.PTM.Link.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string MACAddress = 7;
			message Stats { // 3 // Device.PTM.Link.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string UnicastPacketsSent = 7;
				optional string UnicastPacketsReceived = 8;
				optional string DiscardPacketsSent = 9;
				optional string DiscardPacketsReceived = 10;
				optional string MulticastPacketsSent = 11;
				optional string MulticastPacketsReceived = 12;
				optional string BroadcastPacketsSent = 13;
				optional string BroadcastPacketsReceived = 14;
				optional string UnknownProtoPacketsReceived = 15;
			} // 3 // Device.PTM.Link.{i}.Stats.
			optional Stats stats = 9; // 3
		} // 2 // Device.PTM.Link.{i}.
		repeated Link link = 3; // 2
	} // 1 // Device.PTM.
	optional PTM pTM = 15; // 1
	message Ethernet { // 1 // Device.Ethernet.
		optional string InterfaceNumberOfEntries = 1;
		optional string LinkNumberOfEntries = 2;
		optional string VLANTerminationNumberOfEntries = 3;
		optional string RMONStatsNumberOfEntries = 4;
		message RMONStats { // 2 // Device.Ethernet.RMONStats.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string Interface = 5;
			optional string VLANID = 6;
			optional string Queue = 7;
			optional string AllQueues = 8;
			optional string DropEvents = 9;
			optional string Bytes = 10;
			optional string Packets = 11;
			optional string BroadcastPackets = 12;
			optional string MulticastPackets = 13;
			optional string CRCErroredPackets = 14;
			optional string UndersizePackets = 15;
			optional string OversizePackets = 16;
			optional string Packets64Bytes = 17;
			optional string Packets65to127Bytes = 18;
			optional string Packets128to255Bytes = 19;
			optional string Packets256to511Bytes = 20;
			optional string Packets512to1023Bytes = 21;
			optional string Packets1024to1518Bytes = 22;
		} // 2 // Device.Ethernet.RMONStats.{i}.
		repeated RMONStats rMONStats = 6; // 2
		message Interface { // 2 // Device.Ethernet.Interface.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string Upstream = 7;
			optional string MACAddress = 8;
			optional string MaxBitRate = 9;
			optional string CurrentBitRate = 10;
			optional string DuplexMode = 11;
			optional string EEECapability = 12;
			optional string EEEEnable = 13;
			message Stats { // 3 // Device.Ethernet.Interface.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string UnicastPacketsSent = 7;
				optional string UnicastPacketsReceived = 8;
				optional string DiscardPacketsSent = 9;
				optional string DiscardPacketsReceived = 10;
				optional string MulticastPacketsSent = 11;
				optional string MulticastPacketsReceived = 12;
				optional string BroadcastPacketsSent = 13;
				optional string BroadcastPacketsReceived = 14;
				optional string UnknownProtoPacketsReceived = 15;
			} // 3 // Device.Ethernet.Interface.{i}.Stats.
			optional Stats stats = 15; // 3
		} // 2 // Device.Ethernet.Interface.{i}.
		repeated Interface interface = 7; // 2
		message Link { // 2 // Device.Ethernet.Link.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string MACAddress = 7;
			optional string PriorityTagging = 8;
			message Stats { // 3 // Device.Ethernet.Link.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string UnicastPacketsSent = 7;
				optional string UnicastPacketsReceived = 8;
				optional string DiscardPacketsSent = 9;
				optional string DiscardPacketsReceived = 10;
				optional string MulticastPacketsSent = 11;
				optional string MulticastPacketsReceived = 12;
				optional string BroadcastPacketsSent = 13;
				optional string BroadcastPacketsReceived = 14;
				optional string UnknownProtoPacketsReceived = 15;
			} // 3 // Device.Ethernet.Link.{i}.Stats.
			optional Stats stats = 10; // 3
		} // 2 // Device.Ethernet.Link.{i}.
		repeated Link link = 8; // 2
		message VLANTermination { // 2 // Device.Ethernet.VLANTermination.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string VLANID = 7;
			optional string TPID = 8;
			message Stats { // 3 // Device.Ethernet.VLANTermination.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string UnicastPacketsSent = 7;
				optional string UnicastPacketsReceived = 8;
				optional string DiscardPacketsSent = 9;
				optional string DiscardPacketsReceived = 10;
				optional string MulticastPacketsSent = 11;
				optional string MulticastPacketsReceived = 12;
				optional string BroadcastPacketsSent = 13;
				optional string BroadcastPacketsReceived = 14;
				optional string UnknownProtoPacketsReceived = 15;
			} // 3 // Device.Ethernet.VLANTermination.{i}.Stats.
			optional Stats stats = 10; // 3
		} // 2 // Device.Ethernet.VLANTermination.{i}.
		repeated VLANTermination vLANTermination = 9; // 2
	} // 1 // Device.Ethernet.
	optional Ethernet ethernet = 16; // 1
	message USB { // 1 // Device.USB.
		optional string InterfaceNumberOfEntries = 1;
		optional string PortNumberOfEntries = 2;
		message Interface { // 2 // Device.USB.Interface.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string Upstream = 7;
			optional string MACAddress = 8;
			optional string MaxBitRate = 9;
			optional string Port = 10;
			message Stats { // 3 // Device.USB.Interface.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string UnicastPacketsSent = 7;
				optional string UnicastPacketsReceived = 8;
				optional string DiscardPacketsSent = 9;
				optional string DiscardPacketsReceived = 10;
				optional string MulticastPacketsSent = 11;
				optional string MulticastPacketsReceived = 12;
				optional string BroadcastPacketsSent = 13;
				optional string BroadcastPacketsReceived = 14;
				optional string UnknownProtoPacketsReceived = 15;
			} // 3 // Device.USB.Interface.{i}.Stats.
			optional Stats stats = 12; // 3
		} // 2 // Device.USB.Interface.{i}.
		repeated Interface interface = 4; // 2
		message Port { // 2 // Device.USB.Port.{i}.
			optional string Alias = 1;
			optional string Name = 2;
			optional string Standard = 3;
			optional string Type = 4;
			optional string Receptacle = 5;
			optional string Rate = 6;
			optional string Power = 7;
		} // 2 // Device.USB.Port.{i}.
		repeated Port port = 5; // 2
		message USBHosts { // 2 // Device.USB.USBHosts.
			optional string HostNumberOfEntries = 1;
			message Host { // 3 // Device.USB.USBHosts.Host.{i}.
				optional string Alias = 1;
				optional string Enable = 2;
				optional string Name = 3;
				optional string Type = 4;
				optional string Reset = 5;
				optional string PowerManagementEnable = 6;
				optional string USBVersion = 7;
				optional string DeviceNumberOfEntries = 8;
				message Device { // 4 // Device.USB.USBHosts.Host.{i}.Device.{i}.
					optional string DeviceNumber = 1;
					optional string USBVersion = 2;
					optional string DeviceClass = 3;
					optional string DeviceSubClass = 4;
					optional string DeviceVersion = 5;
					optional string DeviceProtocol = 6;
					optional string ProductID = 7;
					optional string VendorID = 8;
					optional string Manufacturer = 9;
					optional string ProductClass = 10;
					optional string SerialNumber = 11;
					optional string Port = 12;
					optional string USBPort = 13;
					optional string Rate = 14;
					optional string Parent = 15;
					optional string MaxChildren = 16;
					optional string IsSuspended = 17;
					optional string IsSelfPowered = 18;
					optional string ConfigurationNumberOfEntries = 19;
					message Configuration { // 5 // Device.USB.USBHosts.Host.{i}.Device.{i}.Configuration.{i}.
						optional string ConfigurationNumber = 1;
						optional string InterfaceNumberOfEntries = 2;
						message Interface { // 6 // Device.USB.USBHosts.Host.{i}.Device.{i}.Configuration.{i}.Interface.{i}.
							optional string InterfaceNumber = 1;
							optional string InterfaceClass = 2;
							optional string InterfaceSubClass = 3;
							optional string InterfaceProtocol = 4;
						} // 6 // Device.USB.USBHosts.Host.{i}.Device.{i}.Configuration.{i}.Interface.{i}.
						repeated Interface interface = 4; // 6
					} // 5 // Device.USB.USBHosts.Host.{i}.Device.{i}.Configuration.{i}.
					repeated Configuration configuration = 21; // 5
				} // 4 // Device.USB.USBHosts.Host.{i}.Device.{i}.
				repeated Device device = 10; // 4
			} // 3 // Device.USB.USBHosts.Host.{i}.
			repeated Host host = 3; // 3
		} // 2 // Device.USB.USBHosts.
		optional USBHosts uSBHosts = 6; // 2
	} // 1 // Device.USB.
	optional USB uSB = 17; // 1
	message HPNA { // 1 // Device.HPNA.
		optional string InterfaceNumberOfEntries = 1;
		message Interface { // 2 // Device.HPNA.Interface.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string Upstream = 7;
			optional string MACAddress = 8;
			optional string FirmwareVersion = 9;
			optional string NodeID = 10;
			optional string IsMaster = 11;
			optional string Synced = 12;
			optional string TotalSyncTime = 13;
			optional string MaxBitRate = 14;
			optional string NetworkUtilization = 15;
			optional string PossibleConnectionTypes = 16;
			optional string ConnectionType = 17;
			optional string PossibleSpectralModes = 18;
			optional string SpectralMode = 19;
			optional string MTU = 20;
			optional string NoiseMargin = 21;
			optional string DefaultNonLARQPER = 22;
			optional string LARQEnable = 23;
			optional string MinMulticastRate = 24;
			optional string NegMulticastRate = 25;
			optional string MasterSelectionMode = 26;
			optional string AssociatedDeviceNumberOfEntries = 27;
			message Stats { // 3 // Device.HPNA.Interface.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string UnicastPacketsSent = 7;
				optional string UnicastPacketsReceived = 8;
				optional string DiscardPacketsSent = 9;
				optional string DiscardPacketsReceived = 10;
				optional string MulticastPacketsSent = 11;
				optional string MulticastPacketsReceived = 12;
				optional string BroadcastPacketsSent = 13;
				optional string BroadcastPacketsReceived = 14;
				optional string UnknownProtoPacketsReceived = 15;
			} // 3 // Device.HPNA.Interface.{i}.Stats.
			optional Stats stats = 29; // 3
			message QoS { // 3 // Device.HPNA.Interface.{i}.QoS.
				optional string FlowSpecNumberOfEntries = 1;
				message FlowSpec { // 4 // Device.HPNA.Interface.{i}.QoS.FlowSpec.{i}.
					optional string Enable = 1;
					optional string Status = 2;
					optional string Alias = 3;
					optional string TrafficClasses = 4;
					optional string FlowType = 5;
					optional string Priority = 6;
					optional string Latency = 7;
					optional string Jitter = 8;
					optional string PacketSize = 9;
					optional string MinRate = 10;
					optional string AvgRate = 11;
					optional string MaxRate = 12;
					optional string PER = 13;
					optional string Timeout = 14;
				} // 4 // Device.HPNA.Interface.{i}.QoS.FlowSpec.{i}.
				repeated FlowSpec flowSpec = 3; // 4
			} // 3 // Device.HPNA.Interface.{i}.QoS.
			optional QoS qoS = 30; // 3
			message AssociatedDevice { // 3 // Device.HPNA.Interface.{i}.AssociatedDevice.{i}.
				optional string MACAddress = 1;
				optional string NodeID = 2;
				optional string IsMaster = 3;
				optional string Synced = 4;
				optional string TotalSyncTime = 5;
				optional string MaxBitRate = 6;
				optional string PHYDiagnosticsEnable = 7;
				optional string Active = 8;
			} // 3 // Device.HPNA.Interface.{i}.AssociatedDevice.{i}.
			repeated AssociatedDevice associatedDevice = 31; // 3
		} // 2 // Device.HPNA.Interface.{i}.
		repeated Interface interface = 3; // 2
		message Diagnostics { // 2 // Device.HPNA.Diagnostics.
			message PHYThroughput { // 3 // Device.HPNA.Diagnostics.PHYThroughput.
				optional string DiagnosticsState = 1;
				optional string Interface = 2;
				optional string NumPacketsInBurst = 3;
				optional string BurstInterval = 4;
				optional string TestPacketPayloadLength = 5;
				optional string PayloadEncoding = 6;
				optional string PayloadDataGen = 7;
				optional string PayloadType = 8;
				optional string PriorityLevel = 9;
				optional string ResultNumberOfEntries = 10;
				message Result { // 4 // Device.HPNA.Diagnostics.PHYThroughput.Result.{i}.
					optional string SrcMACAddress = 1;
					optional string DestMACAddress = 2;
					optional string PHYRate = 3;
					optional string BaudRate = 4;
					optional string SNR = 5;
					optional string PacketsReceived = 6;
					optional string Attenuation = 7;
				} // 4 // Device.HPNA.Diagnostics.PHYThroughput.Result.{i}.
				repeated Result result = 12; // 4
			} // 3 // Device.HPNA.Diagnostics.PHYThroughput.
			optional PHYThroughput pHYThroughput = 2; // 3
			message PerformanceMonitoring { // 3 // Device.HPNA.Diagnostics.PerformanceMonitoring.
				optional string DiagnosticsState = 1;
				optional string Interface = 2;
				optional string SampleInterval = 3;
				message Nodes { // 4 // Device.HPNA.Diagnostics.PerformanceMonitoring.Nodes.
					optional string CurrentStart = 1;
					optional string CurrentEnd = 2;
					optional string NodeNumberOfEntries = 3;
					message Node { // 5 // Device.HPNA.Diagnostics.PerformanceMonitoring.Nodes.Node.{i}.
						optional string MACAddress = 1;
						optional string BytesSent = 2;
						optional string BytesReceived = 3;
						optional string PacketsSent = 4;
						optional string PacketsReceived = 5;
						optional string BroadcastPacketsSent = 6;
						optional string BroadcastPacketsReceived = 7;
						optional string MulticastPacketsSent = 8;
						optional string MulticastPacketsReceived = 9;
						optional string PacketsCrcErrored = 10;
						optional string PacketsCrcErroredHost = 11;
						optional string PacketsShortErrored = 12;
						optional string PacketsShortErroredHost = 13;
						optional string RxPacketsDropped = 14;
						optional string TxPacketsDropped = 15;
						optional string ControlRequestLocal = 16;
						optional string ControlReplyLocal = 17;
						optional string ControlRequestRemote = 18;
						optional string ControlReplyRemote = 19;
						optional string PacketsSentWire = 20;
						optional string BroadcastPacketsSentWire = 21;
						optional string MulticastPacketsSentWire = 22;
						optional string PacketsInternalControl = 23;
						optional string BroadcastPacketsInternalControl = 24;
						optional string PacketsReceivedQueued = 25;
						optional string PacketsReceivedForwardUnknown = 26;
						optional string NodeUtilization = 27;
					} // 5 // Device.HPNA.Diagnostics.PerformanceMonitoring.Nodes.Node.{i}.
					repeated Node node = 5; // 5
				} // 4 // Device.HPNA.Diagnostics.PerformanceMonitoring.Nodes.
				optional Nodes nodes = 5; // 4
				message Channels { // 4 // Device.HPNA.Diagnostics.PerformanceMonitoring.Channels.
					optional string TimeStamp = 1;
					optional string ChannelNumberOfEntries = 2;
					message Channel { // 5 // Device.HPNA.Diagnostics.PerformanceMonitoring.Channels.Channel.{i}.
						optional string HostSrcMACAddress = 1;
						optional string HostDestMACAddress = 2;
						optional string HPNASrcMACAddress = 3;
						optional string HPNADestMACAddress = 4;
						optional string PHYRate = 5;
						optional string BaudRate = 6;
						optional string SNR = 7;
						optional string PacketsSent = 8;
						optional string PacketsReceived = 9;
						optional string LARQPacketsReceived = 10;
						optional string FlowSpec = 11;
					} // 5 // Device.HPNA.Diagnostics.PerformanceMonitoring.Channels.Channel.{i}.
					repeated Channel channel = 4; // 5
				} // 4 // Device.HPNA.Diagnostics.PerformanceMonitoring.Channels.
				optional Channels channels = 6; // 4
			} // 3 // Device.HPNA.Diagnostics.PerformanceMonitoring.
			optional PerformanceMonitoring performanceMonitoring = 3; // 3
		} // 2 // Device.HPNA.Diagnostics.
		optional Diagnostics diagnostics = 4; // 2
	} // 1 // Device.HPNA.
	optional HPNA hPNA = 18; // 1
	message MoCA { // 1 // Device.MoCA.
		optional string InterfaceNumberOfEntries = 1;
		message Interface { // 2 // Device.MoCA.Interface.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string Upstream = 7;
			optional string MACAddress = 8;
			optional string FirmwareVersion = 9;
			optional string MaxBitRate = 10;
			optional string MaxIngressBW = 11;
			optional string MaxEgressBW = 12;
			optional string HighestVersion = 13;
			optional string CurrentVersion = 14;
			optional string NetworkCoordinator = 15;
			optional string NodeID = 16;
			optional string MaxNodes = 17;
			optional string PreferredNC = 18;
			optional string BackupNC = 19;
			optional string PrivacyEnabledSetting = 20;
			optional string PrivacyEnabled = 21;
			optional string FreqCapabilityMask = 22;
			optional string FreqCurrentMaskSetting = 23;
			optional string FreqCurrentMask = 24;
			optional string CurrentOperFreq = 25;
			optional string LastOperFreq = 26;
			optional string KeyPassphrase = 27;
			optional string TxPowerLimit = 28;
			optional string PowerCntlPhyTarget = 29;
			optional string BeaconPowerLimit = 30;
			optional string NetworkTabooMask = 31;
			optional string NodeTabooMask = 32;
			optional string TxBcastRate = 33;
			optional string TxBcastPowerReduction = 34;
			optional string QAM256Capable = 35;
			optional string PacketAggregationCapability = 36;
			optional string AssociatedDeviceNumberOfEntries = 37;
			message Stats { // 3 // Device.MoCA.Interface.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string UnicastPacketsSent = 7;
				optional string UnicastPacketsReceived = 8;
				optional string DiscardPacketsSent = 9;
				optional string DiscardPacketsReceived = 10;
				optional string MulticastPacketsSent = 11;
				optional string MulticastPacketsReceived = 12;
				optional string BroadcastPacketsSent = 13;
				optional string BroadcastPacketsReceived = 14;
				optional string UnknownProtoPacketsReceived = 15;
			} // 3 // Device.MoCA.Interface.{i}.Stats.
			optional Stats stats = 39; // 3
			message QoS { // 3 // Device.MoCA.Interface.{i}.QoS.
				optional string EgressNumFlows = 1;
				optional string IngressNumFlows = 2;
				optional string FlowStatsNumberOfEntries = 3;
				message FlowStats { // 4 // Device.MoCA.Interface.{i}.QoS.FlowStats.{i}.
					optional string FlowID = 1;
					optional string PacketDA = 2;
					optional string MaxRate = 3;
					optional string MaxBurstSize = 4;
					optional string LeaseTime = 5;
					optional string LeaseTimeLeft = 6;
					optional string FlowPackets = 7;
				} // 4 // Device.MoCA.Interface.{i}.QoS.FlowStats.{i}.
				repeated FlowStats flowStats = 5; // 4
			} // 3 // Device.MoCA.Interface.{i}.QoS.
			optional QoS qoS = 40; // 3
			message AssociatedDevice { // 3 // Device.MoCA.Interface.{i}.AssociatedDevice.{i}.
				optional string MACAddress = 1;
				optional string NodeID = 2;
				optional string PreferredNC = 3;
				optional string HighestVersion = 4;
				optional string PHYTxRate = 5;
				optional string PHYRxRate = 6;
				optional string TxPowerControlReduction = 7;
				optional string RxPowerLevel = 8;
				optional string TxBcastRate = 9;
				optional string RxBcastPowerLevel = 10;
				optional string TxPackets = 11;
				optional string RxPackets = 12;
				optional string RxErroredAndMissedPackets = 13;
				optional string QAM256Capable = 14;
				optional string PacketAggregationCapability = 15;
				optional string RxSNR = 16;
				optional string Active = 17;
			} // 3 // Device.MoCA.Interface.{i}.AssociatedDevice.{i}.
			repeated AssociatedDevice associatedDevice = 41; // 3
		} // 2 // Device.MoCA.Interface.{i}.
		repeated Interface interface = 3; // 2
	} // 1 // Device.MoCA.
	optional MoCA moCA = 19; // 1
	message Ghn { // 1 // Device.Ghn.
		optional string InterfaceNumberOfEntries = 1;
		message Interface { // 2 // Device.Ghn.Interface.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string Upstream = 7;
			optional string MACAddress = 8;
			optional string FirmwareVersion = 9;
			optional string ConnectionType = 10;
			optional string MaxTransmitRate = 11;
			optional string TargetDomainNames = 12;
			optional string DomainName = 13;
			optional string DomainNameIdentifier = 14;
			optional string DomainId = 15;
			optional string DeviceId = 16;
			optional string MaxBitRate = 17;
			optional string NodeTypeDMCapable = 18;
			optional string DMRequested = 19;
			optional string IsDM = 20;
			optional string NodeTypeSCCapable = 21;
			optional string SCRequested = 22;
			optional string IsSC = 23;
			optional string StandardVersions = 24;
			optional string MaxBandPlan = 25;
			optional string MediumType = 26;
			optional string TAIFG = 27;
			optional string NotchedAmateurRadioBands = 28;
			optional string PHYThroughputDiagnosticsEnable = 29;
			optional string PerformanceMonitoringDiagnosticsEnable = 30;
			optional string SMMaskedBandNumberOfEntries = 31;
			optional string NodeTypeDMConfig = 32;
			optional string NodeTypeDMStatus = 33;
			optional string NodeTypeSCStatus = 34;
			optional string AssociatedDeviceNumberOfEntries = 35;
			message DMInfo { // 3 // Device.Ghn.Interface.{i}.DMInfo.
				optional string DomainName = 1;
				optional string DomainNameIdentifier = 2;
				optional string DomainId = 3;
				optional string MACCycleDuration = 4;
				optional string SCDeviceId = 5;
				optional string SCMACAddress = 6;
				optional string ReregistrationTimePeriod = 7;
				optional string TopologyPeriodicInterval = 8;
				optional string MinSupportedBandplan = 9;
				optional string MaxSupportedBandplan = 10;
			} // 3 // Device.Ghn.Interface.{i}.DMInfo.
			optional DMInfo dMInfo = 37; // 3
			message SCInfo { // 3 // Device.Ghn.Interface.{i}.SCInfo.
				optional string ModesSupported = 1;
				optional string ModeEnabled = 2;
				optional string MICSize = 3;
				optional string Location = 4;
			} // 3 // Device.Ghn.Interface.{i}.SCInfo.
			optional SCInfo sCInfo = 38; // 3
			message SMMaskedBand { // 3 // Device.Ghn.Interface.{i}.SMMaskedBand.{i}.
				optional string Enable = 1;
				optional string BandNumber = 2;
				optional string StartSubCarrier = 3;
				optional string StopSubCarrier = 4;
			} // 3 // Device.Ghn.Interface.{i}.SMMaskedBand.{i}.
			repeated SMMaskedBand sMMaskedBand = 39; // 3
			message Stats { // 3 // Device.Ghn.Interface.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string UnicastPacketsSent = 7;
				optional string UnicastPacketsReceived = 8;
				optional string DiscardPacketsSent = 9;
				optional string DiscardPacketsReceived = 10;
				optional string MulticastPacketsSent = 11;
				optional string MulticastPacketsReceived = 12;
				optional string BroadcastPacketsSent = 13;
				optional string BroadcastPacketsReceived = 14;
				optional string UnknownProtoPacketsReceived = 15;
				optional string MgmtBytesSent = 16;
				optional string MgmtBytesReceived = 17;
				optional string MgmtPacketsSent = 18;
				optional string MgmtPacketsReceived = 19;
				optional string BlocksSent = 20;
				optional string BlocksReceived = 21;
				optional string BlocksResent = 22;
				optional string BlocksErrorsReceived = 23;
			} // 3 // Device.Ghn.Interface.{i}.Stats.
			optional Stats stats = 40; // 3
			message AssociatedDevice { // 3 // Device.Ghn.Interface.{i}.AssociatedDevice.{i}.
				optional string MACAddress = 1;
				optional string DeviceId = 2;
				optional string TxPhyRate = 3;
				optional string RxPhyRate = 4;
				optional string Active = 5;
			} // 3 // Device.Ghn.Interface.{i}.AssociatedDevice.{i}.
			repeated AssociatedDevice associatedDevice = 41; // 3
		} // 2 // Device.Ghn.Interface.{i}.
		repeated Interface interface = 3; // 2
		message Diagnostics { // 2 // Device.Ghn.Diagnostics.
			message PHYThroughput { // 3 // Device.Ghn.Diagnostics.PHYThroughput.
				optional string DiagnosticsState = 1;
				optional string Interface = 2;
				optional string DiagnoseMACAddress = 3;
				optional string PHYThroughputResultNumberOfEntries = 4;
				message Result { // 4 // Device.Ghn.Diagnostics.PHYThroughput.Result.{i}.
					optional string DestinationMACAddress = 1;
					optional string LinkState = 2;
					optional string TxPhyRate = 3;
					optional string RxPhyRate = 4;
				} // 4 // Device.Ghn.Diagnostics.PHYThroughput.Result.{i}.
				repeated Result result = 6; // 4
			} // 3 // Device.Ghn.Diagnostics.PHYThroughput.
			optional PHYThroughput pHYThroughput = 2; // 3
			message PerformanceMonitoring { // 3 // Device.Ghn.Diagnostics.PerformanceMonitoring.
				optional string DiagnosticsState = 1;
				optional string Interface = 2;
				optional string DiagnoseMACAddress = 3;
				optional string SampleInterval = 4;
				optional string SNRGroupLength = 5;
				message Nodes { // 4 // Device.Ghn.Diagnostics.PerformanceMonitoring.Nodes.
					optional string CurrentStart = 1;
					optional string CurrentEnd = 2;
					optional string NodeNumberOfEntries = 3;
					message Node { // 5 // Device.Ghn.Diagnostics.PerformanceMonitoring.Nodes.Node.{i}.
						optional string DestinationMACAddress = 1;
						optional string BytesSent = 2;
						optional string BytesReceived = 3;
						optional string PacketsSent = 4;
						optional string PacketsReceived = 5;
						optional string ErrorsSent = 6;
						optional string ErrorsReceived = 7;
						optional string UnicastPacketsSent = 8;
						optional string UnicastPacketsReceived = 9;
						optional string DiscardPacketsSent = 10;
						optional string DiscardPacketsReceived = 11;
						optional string MulticastPacketsSent = 12;
						optional string MulticastPacketsReceived = 13;
						optional string BroadcastPacketsSent = 14;
						optional string BroadcastPacketsReceived = 15;
						optional string UnknownProtoPacketsReceived = 16;
						optional string MgmtBytesSent = 17;
						optional string MgmtBytesReceived = 18;
						optional string MgmtPacketsSent = 19;
						optional string MgmtPacketsReceived = 20;
						optional string BlocksSent = 21;
						optional string BlocksReceived = 22;
						optional string BlocksResent = 23;
						optional string BlocksErrorsReceived = 24;
					} // 5 // Device.Ghn.Diagnostics.PerformanceMonitoring.Nodes.Node.{i}.
					repeated Node node = 5; // 5
				} // 4 // Device.Ghn.Diagnostics.PerformanceMonitoring.Nodes.
				optional Nodes nodes = 7; // 4
				message Channels { // 4 // Device.Ghn.Diagnostics.PerformanceMonitoring.Channels.
					optional string TimeStamp = 1;
					optional string ChannelNumberOfEntries = 2;
					message Channel { // 5 // Device.Ghn.Diagnostics.PerformanceMonitoring.Channels.Channel.{i}.
						optional string DestinationMACAddress = 1;
						optional string SNR = 2;
					} // 5 // Device.Ghn.Diagnostics.PerformanceMonitoring.Channels.Channel.{i}.
					repeated Channel channel = 4; // 5
				} // 4 // Device.Ghn.Diagnostics.PerformanceMonitoring.Channels.
				optional Channels channels = 8; // 4
			} // 3 // Device.Ghn.Diagnostics.PerformanceMonitoring.
			optional PerformanceMonitoring performanceMonitoring = 3; // 3
		} // 2 // Device.Ghn.Diagnostics.
		optional Diagnostics diagnostics = 4; // 2
	} // 1 // Device.Ghn.
	optional Ghn ghn = 20; // 1
	message HomePlug { // 1 // Device.HomePlug.
		optional string InterfaceNumberOfEntries = 1;
		message Interface { // 2 // Device.HomePlug.Interface.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string Upstream = 7;
			optional string MACAddress = 8;
			optional string LogicalNetwork = 9;
			optional string Version = 10;
			optional string FirmwareVersion = 11;
			optional string ForceCCo = 12;
			optional string NetworkPassword = 13;
			optional string OtherNetworksPresent = 14;
			optional string MaxBitRate = 15;
			optional string AssociatedDeviceNumberOfEntries = 16;
			message Stats { // 3 // Device.HomePlug.Interface.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string UnicastPacketsSent = 7;
				optional string UnicastPacketsReceived = 8;
				optional string DiscardPacketsSent = 9;
				optional string DiscardPacketsReceived = 10;
				optional string MulticastPacketsSent = 11;
				optional string MulticastPacketsReceived = 12;
				optional string BroadcastPacketsSent = 13;
				optional string BroadcastPacketsReceived = 14;
				optional string UnknownProtoPacketsReceived = 15;
				optional string MPDUTxAck = 16;
				optional string MPDUTxCol = 17;
				optional string MPDUTxFailed = 18;
				optional string MPDURxAck = 19;
				optional string MPDURxFailed = 20;
			} // 3 // Device.HomePlug.Interface.{i}.Stats.
			optional Stats stats = 18; // 3
			message AssociatedDevice { // 3 // Device.HomePlug.Interface.{i}.AssociatedDevice.{i}.
				optional string MACAddress = 1;
				optional string TxPhyRate = 2;
				optional string RxPhyRate = 3;
				optional string SNRPerTone = 4;
				optional string AvgAttenuation = 5;
				optional string EndStationMACs = 6;
				optional string Active = 7;
			} // 3 // Device.HomePlug.Interface.{i}.AssociatedDevice.{i}.
			repeated AssociatedDevice associatedDevice = 19; // 3
		} // 2 // Device.HomePlug.Interface.{i}.
		repeated Interface interface = 3; // 2
	} // 1 // Device.HomePlug.
	optional HomePlug homePlug = 21; // 1
	message UPA { // 1 // Device.UPA.
		optional string InterfaceNumberOfEntries = 1;
		message Interface { // 2 // Device.UPA.Interface.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string Upstream = 7;
			optional string MACAddress = 8;
			optional string FirmwareVersion = 9;
			optional string MaxBitRate = 10;
			optional string NodeType = 11;
			optional string LogicalNetwork = 12;
			optional string EncryptionMethod = 13;
			optional string EncryptionKey = 14;
			optional string PowerBackoffEnabled = 15;
			optional string PowerBackoffMechanismActive = 16;
			optional string EstApplicationThroughput = 17;
			optional string ActiveNotchEnable = 18;
			optional string ActiveNotchNumberOfEntries = 19;
			optional string AssociatedDeviceNumberOfEntries = 20;
			optional string BridgeForNumberOfEntries = 21;
			message Stats { // 3 // Device.UPA.Interface.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string UnicastPacketsSent = 7;
				optional string UnicastPacketsReceived = 8;
				optional string DiscardPacketsSent = 9;
				optional string DiscardPacketsReceived = 10;
				optional string MulticastPacketsSent = 11;
				optional string MulticastPacketsReceived = 12;
				optional string BroadcastPacketsSent = 13;
				optional string BroadcastPacketsReceived = 14;
				optional string UnknownProtoPacketsReceived = 15;
			} // 3 // Device.UPA.Interface.{i}.Stats.
			optional Stats stats = 23; // 3
			message AssociatedDevice { // 3 // Device.UPA.Interface.{i}.AssociatedDevice.{i}.
				optional string MACAddress = 1;
				optional string Port = 2;
				optional string LogicalNetwork = 3;
				optional string PhyTxThroughput = 4;
				optional string PhyRxThroughput = 5;
				optional string RealPhyRxThroughput = 6;
				optional string EstimatedPLR = 7;
				optional string MeanEstimatedAtt = 8;
				optional string SmartRouteIntermediatePLCMAC = 9;
				optional string DirectRoute = 10;
				optional string Active = 11;
			} // 3 // Device.UPA.Interface.{i}.AssociatedDevice.{i}.
			repeated AssociatedDevice associatedDevice = 24; // 3
			message ActiveNotch { // 3 // Device.UPA.Interface.{i}.ActiveNotch.{i}.
				optional string Enable = 1;
				optional string Alias = 2;
				optional string StartFreq = 3;
				optional string StopFreq = 4;
				optional string Depth = 5;
			} // 3 // Device.UPA.Interface.{i}.ActiveNotch.{i}.
			repeated ActiveNotch activeNotch = 25; // 3
			message BridgeFor { // 3 // Device.UPA.Interface.{i}.BridgeFor.{i}.
				optional string Alias = 1;
				optional string MACAddress = 2;
				optional string Port = 3;
			} // 3 // Device.UPA.Interface.{i}.BridgeFor.{i}.
			repeated BridgeFor bridgeFor = 26; // 3
		} // 2 // Device.UPA.Interface.{i}.
		repeated Interface interface = 3; // 2
		message Diagnostics { // 2 // Device.UPA.Diagnostics.
			message InterfaceMeasurement { // 3 // Device.UPA.Diagnostics.InterfaceMeasurement.
				optional string DiagnosticsState = 1;
				optional string Type = 2;
				optional string Interface = 3;
				optional string Port = 4;
				optional string Measurements = 5;
				optional string RxGain = 6;
			} // 3 // Device.UPA.Diagnostics.InterfaceMeasurement.
			optional InterfaceMeasurement interfaceMeasurement = 2; // 3
		} // 2 // Device.UPA.Diagnostics.
		optional Diagnostics diagnostics = 4; // 2
	} // 1 // Device.UPA.
	optional UPA uPA = 22; // 1
	message WiFi { // 1 // Device.WiFi.
		optional string RadioNumberOfEntries = 1;
		optional string SSIDNumberOfEntries = 2;
		optional string AccessPointNumberOfEntries = 3;
		optional string EndPointNumberOfEntries = 4;
		message Radio { // 2 // Device.WiFi.Radio.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string Upstream = 7;
			optional string MaxBitRate = 8;
			optional string SupportedFrequencyBands = 9;
			optional string OperatingFrequencyBand = 10;
			optional string SupportedStandards = 11;
			optional string OperatingStandards = 12;
			optional string PossibleChannels = 13;
			optional string ChannelsInUse = 14;
			optional string Channel = 15;
			optional string AutoChannelSupported = 16;
			optional string AutoChannelEnable = 17;
			optional string AutoChannelRefreshPeriod = 18;
			optional string OperatingChannelBandwidth = 19;
			optional string ExtensionChannel = 20;
			optional string GuardInterval = 21;
			optional string MCS = 22;
			optional string TransmitPowerSupported = 23;
			optional string TransmitPower = 24;
			optional string IEEE80211hSupported = 25;
			optional string IEEE80211hEnabled = 26;
			optional string RegulatoryDomain = 27;
			optional string RetryLimit = 28;
			optional string CCARequest = 29;
			optional string CCAReport = 30;
			optional string RPIHistogramRequest = 31;
			optional string RPIHistogramReport = 32;
			optional string FragmentationThreshold = 33;
			optional string RTSThreshold = 34;
			optional string LongRetryLimit = 35;
			optional string BeaconPeriod = 36;
			optional string DTIMPeriod = 37;
			optional string PacketAggregationEnable = 38;
			optional string PreambleType = 39;
			optional string BasicDataTransmitRates = 40;
			optional string OperationalDataTransmitRates = 41;
			optional string SupportedDataTransmitRates = 42;
			message Stats { // 3 // Device.WiFi.Radio.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string DiscardPacketsSent = 7;
				optional string DiscardPacketsReceived = 8;
				optional string PLCPErrorCount = 9;
				optional string FCSErrorCount = 10;
				optional string InvalidMACCount = 11;
				optional string PacketsOtherReceived = 12;
				optional string Noise = 13;
			} // 3 // Device.WiFi.Radio.{i}.Stats.
			optional Stats stats = 44; // 3
		} // 2 // Device.WiFi.Radio.{i}.
		repeated Radio radio = 6; // 2
		message NeighboringWiFiDiagnostic { // 2 // Device.WiFi.NeighboringWiFiDiagnostic.
			optional string DiagnosticsState = 1;
			optional string ResultNumberOfEntries = 2;
			message Result { // 3 // Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.
				optional string Radio = 1;
				optional string SSID = 2;
				optional string BSSID = 3;
				optional string Mode = 4;
				optional string Channel = 5;
				optional string SignalStrength = 6;
				optional string SecurityModeEnabled = 7;
				optional string EncryptionMode = 8;
				optional string OperatingFrequencyBand = 9;
				optional string SupportedStandards = 10;
				optional string OperatingStandards = 11;
				optional string OperatingChannelBandwidth = 12;
				optional string BeaconPeriod = 13;
				optional string Noise = 14;
				optional string BasicDataTransferRates = 15;
				optional string SupportedDataTransferRates = 16;
				optional string DTIMPeriod = 17;
			} // 3 // Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.
			repeated Result result = 4; // 3
		} // 2 // Device.WiFi.NeighboringWiFiDiagnostic.
		optional NeighboringWiFiDiagnostic neighboringWiFiDiagnostic = 7; // 2
		message SSID { // 2 // Device.WiFi.SSID.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string BSSID = 7;
			optional string MACAddress = 8;
			optional string SSID = 9;
			message Stats { // 3 // Device.WiFi.SSID.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string RetransCount = 6;
				optional string FailedRetransCount = 7;
				optional string RetryCount = 8;
				optional string MultipleRetryCount = 9;
				optional string ACKFailureCount = 10;
				optional string AggregatedPacketCount = 11;
				optional string ErrorsReceived = 12;
				optional string UnicastPacketsSent = 13;
				optional string UnicastPacketsReceived = 14;
				optional string DiscardPacketsSent = 15;
				optional string DiscardPacketsReceived = 16;
				optional string MulticastPacketsSent = 17;
				optional string MulticastPacketsReceived = 18;
				optional string BroadcastPacketsSent = 19;
				optional string BroadcastPacketsReceived = 20;
				optional string UnknownProtoPacketsReceived = 21;
			} // 3 // Device.WiFi.SSID.{i}.Stats.
			optional Stats stats = 11; // 3
		} // 2 // Device.WiFi.SSID.{i}.
		repeated SSID sSID = 8; // 2
		message AccessPoint { // 2 // Device.WiFi.AccessPoint.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string SSIDReference = 4;
			optional string SSIDAdvertisementEnabled = 5;
			optional string RetryLimit = 6;
			optional string WMMCapability = 7;
			optional string UAPSDCapability = 8;
			optional string WMMEnable = 9;
			optional string UAPSDEnable = 10;
			optional string AssociatedDeviceNumberOfEntries = 11;
			optional string MaxAssociatedDevices = 12;
			optional string IsolationEnable = 13;
			optional string MACAddressControlEnabled = 14;
			optional string AllowedMACAddress = 15;
			message Security { // 3 // Device.WiFi.AccessPoint.{i}.Security.
				optional string Reset = 1;
				optional string ModesSupported = 2;
				optional string ModeEnabled = 3;
				optional string WEPKey = 4;
				optional string PreSharedKey = 5;
				optional string KeyPassphrase = 6;
				optional string RekeyingInterval = 7;
				optional string RadiusServerIPAddr = 8;
				optional string SecondaryRadiusServerIPAddr  = 9;
				optional string RadiusServerPort = 10;
				optional string SecondaryRadiusServerPort = 11;
				optional string RadiusSecret = 12;
				optional string SecondaryRadiusSecret = 13;
			} // 3 // Device.WiFi.AccessPoint.{i}.Security.
			optional Security security = 17; // 3
			message Accounting { // 3 // Device.WiFi.AccessPoint.{i}.Accounting.
				optional string Enable = 1;
				optional string ServerIPAddr = 2;
				optional string SecondaryServerIPAddr = 3;
				optional string ServerPort = 4;
				optional string SecondaryServerPort = 5;
				optional string Secret = 6;
				optional string SecondarySecret = 7;
				optional string InterimInterval = 8;
			} // 3 // Device.WiFi.AccessPoint.{i}.Accounting.
			optional Accounting accounting = 18; // 3
			message WPS { // 3 // Device.WiFi.AccessPoint.{i}.WPS.
				optional string Enable = 1;
				optional string ConfigMethodsSupported = 2;
				optional string ConfigMethodsEnabled = 3;
			} // 3 // Device.WiFi.AccessPoint.{i}.WPS.
			optional WPS wPS = 19; // 3
			message AssociatedDevice { // 3 // Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.
				optional string MACAddress = 1;
				optional string OperatingStandard = 2;
				optional string AuthenticationState = 3;
				optional string LastDataDownlinkRate = 4;
				optional string LastDataUplinkRate = 5;
				optional string SignalStrength = 6;
				optional string Retransmissions = 7;
				optional string Active = 8;
				message Stats { // 4 // Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.Stats.
					optional string BytesSent = 1;
					optional string BytesReceived = 2;
					optional string PacketsSent = 3;
					optional string PacketsReceived = 4;
					optional string ErrorsSent = 5;
					optional string RetransCount = 6;
					optional string FailedRetransCount = 7;
					optional string RetryCount = 8;
					optional string MultipleRetryCount = 9;
				} // 4 // Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.Stats.
				optional Stats stats = 10; // 4
			} // 3 // Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}.
			repeated AssociatedDevice associatedDevice = 20; // 3
			message AC { // 3 // Device.WiFi.AccessPoint.{i}.AC.{i}.
				optional string AccessCategory = 1;
				optional string Alias = 2;
				optional string AIFSN = 3;
				optional string ECWMin = 4;
				optional string ECWMax = 5;
				optional string TxOpMax = 6;
				optional string AckPolicy = 7;
				optional string OutQLenHistogramIntervals = 8;
				optional string OutQLenHistogramSampleInterval = 9;
				message Stats { // 4 // Device.WiFi.AccessPoint.{i}.AC.{i}.Stats.
					optional string BytesSent = 1;
					optional string BytesReceived = 2;
					optional string PacketsSent = 3;
					optional string PacketsReceived = 4;
					optional string ErrorsSent = 5;
					optional string ErrorsReceived = 6;
					optional string DiscardPacketsSent = 7;
					optional string DiscardPacketsReceived = 8;
					optional string RetransCount = 9;
					optional string OutQLenHistogram = 10;
				} // 4 // Device.WiFi.AccessPoint.{i}.AC.{i}.Stats.
				optional Stats stats = 11; // 4
			} // 3 // Device.WiFi.AccessPoint.{i}.AC.{i}.
			repeated AC aC = 21; // 3
		} // 2 // Device.WiFi.AccessPoint.{i}.
		repeated AccessPoint accessPoint = 9; // 2
		message EndPoint { // 2 // Device.WiFi.EndPoint.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string ProfileReference = 4;
			optional string SSIDReference = 5;
			optional string ProfileNumberOfEntries = 6;
			message Stats { // 3 // Device.WiFi.EndPoint.{i}.Stats.
				optional string LastDataDownlinkRate = 1;
				optional string LastDataUplinkRate = 2;
				optional string SignalStrength = 3;
				optional string Retransmissions = 4;
			} // 3 // Device.WiFi.EndPoint.{i}.Stats.
			optional Stats stats = 8; // 3
			message Security { // 3 // Device.WiFi.EndPoint.{i}.Security.
				optional string ModesSupported = 1;
			} // 3 // Device.WiFi.EndPoint.{i}.Security.
			optional Security security = 9; // 3
			message Profile { // 3 // Device.WiFi.EndPoint.{i}.Profile.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string Alias = 3;
				optional string SSID = 4;
				optional string Location = 5;
				optional string Priority = 6;
				message Security { // 4 // Device.WiFi.EndPoint.{i}.Profile.{i}.Security.
					optional string ModeEnabled = 1;
					optional string WEPKey = 2;
					optional string PreSharedKey = 3;
					optional string KeyPassphrase = 4;
				} // 4 // Device.WiFi.EndPoint.{i}.Profile.{i}.Security.
				optional Security security = 8; // 4
			} // 3 // Device.WiFi.EndPoint.{i}.Profile.{i}.
			repeated Profile profile = 10; // 3
			message WPS { // 3 // Device.WiFi.EndPoint.{i}.WPS.
				optional string Enable = 1;
				optional string ConfigMethodsSupported = 2;
				optional string ConfigMethodsEnabled = 3;
			} // 3 // Device.WiFi.EndPoint.{i}.WPS.
			optional WPS wPS = 11; // 3
			message AC { // 3 // Device.WiFi.EndPoint.{i}.AC.{i}.
				optional string AccessCategory = 1;
				optional string Alias = 2;
				optional string AIFSN = 3;
				optional string ECWMin = 4;
				optional string ECWMax = 5;
				optional string TxOpMax = 6;
				optional string AckPolicy = 7;
				optional string OutQLenHistogramIntervals = 8;
				optional string OutQLenHistogramSampleInterval = 9;
				message Stats { // 4 // Device.WiFi.EndPoint.{i}.AC.{i}.Stats.
					optional string BytesSent = 1;
					optional string BytesReceived = 2;
					optional string PacketsSent = 3;
					optional string PacketsReceived = 4;
					optional string ErrorsSent = 5;
					optional string ErrorsReceived = 6;
					optional string DiscardPacketsSent = 7;
					optional string DiscardPacketsReceived = 8;
					optional string RetransCount = 9;
					optional string OutQLenHistogram = 10;
				} // 4 // Device.WiFi.EndPoint.{i}.AC.{i}.Stats.
				optional Stats stats = 11; // 4
			} // 3 // Device.WiFi.EndPoint.{i}.AC.{i}.
			repeated AC aC = 12; // 3
		} // 2 // Device.WiFi.EndPoint.{i}.
		repeated EndPoint endPoint = 10; // 2
	} // 1 // Device.WiFi.
	optional WiFi wiFi = 23; // 1
	message ZigBee { // 1 // Device.ZigBee.
		optional string InterfaceNumberOfEntries = 1;
		optional string ZDONumberOfEntries = 2;
		message Interface { // 2 // Device.ZigBee.Interface.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string IEEEAddress = 7;
			optional string NetworkAddress = 8;
			optional string ZDOReference = 9;
			optional string AssociatedDeviceNumberOfEntries = 10;
			message Stats { // 3 // Device.ZigBee.Interface.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string UnicastPacketsSent = 7;
				optional string UnicastPacketsReceived = 8;
				optional string DiscardPacketsSent = 9;
				optional string DiscardPacketsReceived = 10;
				optional string MulticastPacketsSent = 11;
				optional string MulticastPacketsReceived = 12;
				optional string BroadcastPacketsSent = 13;
				optional string BroadcastPacketsReceived = 14;
				optional string UnknownPacketsReceived = 15;
			} // 3 // Device.ZigBee.Interface.{i}.Stats.
			optional Stats stats = 12; // 3
			message AssociatedDevice { // 3 // Device.ZigBee.Interface.{i}.AssociatedDevice.{i}.
				optional string IEEEAddress = 1;
				optional string NetworkAddress = 2;
				optional string Active = 3;
				optional string ZDOReference = 4;
			} // 3 // Device.ZigBee.Interface.{i}.AssociatedDevice.{i}.
			repeated AssociatedDevice associatedDevice = 13; // 3
		} // 2 // Device.ZigBee.Interface.{i}.
		repeated Interface interface = 4; // 2
		message ZDO { // 2 // Device.ZigBee.ZDO.{i}.
			optional string Alias = 1;
			optional string IEEEAddress = 2;
			optional string NetworkAddress = 3;
			optional string BindingTableNumberOfEntries = 4;
			optional string GroupNumberOfEntries = 5;
			optional string ApplicationEndpointNumberOfEntries = 6;
			message NodeDescriptor { // 3 // Device.ZigBee.ZDO.{i}.NodeDescriptor.
				optional string LogicalType = 1;
				optional string ComplexDescriptorSupported = 2;
				optional string UserDescriptorSupported = 3;
				optional string FrequencyBand = 4;
				optional string MACCapability = 5;
				optional string ManufactureCode = 6;
				optional string MaximumBufferSize = 7;
				optional string MaximumIncomingTransferSize = 8;
				optional string MaximumOutgoingTransferSize = 9;
				optional string ServerMask = 10;
				optional string DescriptorCapability = 11;
			} // 3 // Device.ZigBee.ZDO.{i}.NodeDescriptor.
			optional NodeDescriptor nodeDescriptor = 8; // 3
			message PowerDescriptor { // 3 // Device.ZigBee.ZDO.{i}.PowerDescriptor.
				optional string CurrentPowerMode = 1;
				optional string AvailablePowerSource = 2;
				optional string CurrentPowerSource = 3;
				optional string CurrentPowerSourceLevel = 4;
			} // 3 // Device.ZigBee.ZDO.{i}.PowerDescriptor.
			optional PowerDescriptor powerDescriptor = 9; // 3
			message UserDescriptor { // 3 // Device.ZigBee.ZDO.{i}.UserDescriptor.
				optional string DescriptorAvailable = 1;
				optional string Description = 2;
			} // 3 // Device.ZigBee.ZDO.{i}.UserDescriptor.
			optional UserDescriptor userDescriptor = 10; // 3
			message ComplexDescriptor { // 3 // Device.ZigBee.ZDO.{i}.ComplexDescriptor.
				optional string DescriptorAvailable = 1;
				optional string Language = 2;
				optional string CharacterSet = 3;
				optional string ManufacturerName = 4;
				optional string ModelName = 5;
				optional string SerialNumber = 6;
				optional string DeviceURL = 7;
				optional string Icon = 8;
				optional string IconURL = 9;
			} // 3 // Device.ZigBee.ZDO.{i}.ComplexDescriptor.
			optional ComplexDescriptor complexDescriptor = 11; // 3
			message Security { // 3 // Device.ZigBee.ZDO.{i}.Security.
				optional string TrustCenterAddress = 1;
				optional string SecurityLevel = 2;
				optional string TimeOutPeriod = 3;
			} // 3 // Device.ZigBee.ZDO.{i}.Security.
			optional Security security = 12; // 3
			message Network { // 3 // Device.ZigBee.ZDO.{i}.Network.
				optional string NeighborNumberOfEntries = 1;
				message Neighbor { // 4 // Device.ZigBee.ZDO.{i}.Network.Neighbor.{i}.
					optional string Neighbor = 1;
					optional string LQI = 2;
					optional string Relationship = 3;
					optional string PermitJoin = 4;
					optional string Depth = 5;
				} // 4 // Device.ZigBee.ZDO.{i}.Network.Neighbor.{i}.
				repeated Neighbor neighbor = 3; // 4
			} // 3 // Device.ZigBee.ZDO.{i}.Network.
			optional Network network = 13; // 3
			message NodeManager { // 3 // Device.ZigBee.ZDO.{i}.NodeManager.
				optional string RoutingTableNumberOfEntries = 1;
				message RoutingTable { // 4 // Device.ZigBee.ZDO.{i}.NodeManager.RoutingTable.{i}.
					optional string DestinationAddress = 1;
					optional string NextHopAddress = 2;
					optional string Status = 3;
					optional string MemoryConstrained = 4;
					optional string ManyToOne = 5;
					optional string RouteRecordRequired = 6;
				} // 4 // Device.ZigBee.ZDO.{i}.NodeManager.RoutingTable.{i}.
				repeated RoutingTable routingTable = 3; // 4
			} // 3 // Device.ZigBee.ZDO.{i}.NodeManager.
			optional NodeManager nodeManager = 14; // 3
			message Binding { // 3 // Device.ZigBee.ZDO.{i}.Binding.{i}.
				optional string Enable = 1;
				optional string Alias = 2;
				optional string SourceEndpoint = 3;
				optional string SourceAddress = 4;
				optional string ClusterId = 5;
				optional string DestinationAddressMode = 6;
				optional string DestinationEndpoint = 7;
				optional string IEEEDestinationAddress = 8;
				optional string GroupDestinationAddress = 9;
			} // 3 // Device.ZigBee.ZDO.{i}.Binding.{i}.
			repeated Binding binding = 15; // 3
			message Group { // 3 // Device.ZigBee.ZDO.{i}.Group.{i}.
				optional string Enable = 1;
				optional string Alias = 2;
				optional string GroupId = 3;
				optional string EndpointList = 4;
			} // 3 // Device.ZigBee.ZDO.{i}.Group.{i}.
			repeated Group group = 16; // 3
			message ApplicationEndpoint { // 3 // Device.ZigBee.ZDO.{i}.ApplicationEndpoint.{i}.
				optional string Enable = 1;
				optional string Alias = 2;
				optional string EndpointId = 3;
				message SimpleDescriptor { // 4 // Device.ZigBee.ZDO.{i}.ApplicationEndpoint.{i}.SimpleDescriptor.
					optional string ProfileId = 1;
					optional string DeviceId = 2;
					optional string DeviceVersion = 3;
					optional string InputClusterList = 4;
					optional string OutputClusterList = 5;
				} // 4 // Device.ZigBee.ZDO.{i}.ApplicationEndpoint.{i}.SimpleDescriptor.
				optional SimpleDescriptor simpleDescriptor = 5; // 4
			} // 3 // Device.ZigBee.ZDO.{i}.ApplicationEndpoint.{i}.
			repeated ApplicationEndpoint applicationEndpoint = 17; // 3
		} // 2 // Device.ZigBee.ZDO.{i}.
		repeated ZDO zDO = 5; // 2
		message Discovery { // 2 // Device.ZigBee.Discovery.
			optional string AreaNetworkNumberOfEntries = 1;
			message AreaNetwork { // 3 // Device.ZigBee.Discovery.AreaNetwork.{i}.
				optional string Enable = 1;
				optional string LastUpdate = 2;
				optional string Status = 3;
				optional string Alias = 4;
				optional string Coordinator = 5;
				optional string ZDOReference = 6;
				optional string ZDOList = 7;
			} // 3 // Device.ZigBee.Discovery.AreaNetwork.{i}.
			repeated AreaNetwork areaNetwork = 3; // 3
		} // 2 // Device.ZigBee.Discovery.
		optional Discovery discovery = 6; // 2
	} // 1 // Device.ZigBee.
	optional ZigBee zigBee = 24; // 1
	message Bridging { // 1 // Device.Bridging.
		optional string MaxBridgeEntries = 1;
		optional string MaxDBridgeEntries = 2;
		optional string MaxQBridgeEntries = 3;
		optional string MaxVLANEntries = 4;
		optional string MaxProviderBridgeEntries = 5;
		optional string ProviderBridgeNumberOfEntries = 6;
		optional string MaxFilterEntries = 7;
		optional string BridgeNumberOfEntries = 8;
		optional string FilterNumberOfEntries = 9;
		message Bridge { // 2 // Device.Bridging.Bridge.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Standard = 4;
			optional string PortNumberOfEntries = 5;
			optional string VLANNumberOfEntries = 6;
			optional string VLANPortNumberOfEntries = 7;
			message Port { // 3 // Device.Bridging.Bridge.{i}.Port.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string Alias = 3;
				optional string Name = 4;
				optional string LastChange = 5;
				optional string LowerLayers = 6;
				optional string ManagementPort = 7;
				optional string Type = 8;
				optional string DefaultUserPriority = 9;
				optional string PriorityRegeneration = 10;
				optional string PortState = 11;
				optional string PVID = 12;
				optional string TPID = 13;
				optional string AcceptableFrameTypes = 14;
				optional string IngressFiltering = 15;
				optional string ServiceAccessPrioritySelection = 16;
				optional string ServiceAccessPriorityTranslation = 17;
				optional string PriorityTagging = 18;
				message PriorityCodePoint { // 4 // Device.Bridging.Bridge.{i}.Port.{i}.PriorityCodePoint.
					optional string PCPSelection = 1;
					optional string UseDEI = 2;
					optional string RequireDropEncoding = 3;
					optional string PCPEncoding = 4;
					optional string PCPDecoding = 5;
				} // 4 // Device.Bridging.Bridge.{i}.Port.{i}.PriorityCodePoint.
				optional PriorityCodePoint priorityCodePoint = 20; // 4
				message Stats { // 4 // Device.Bridging.Bridge.{i}.Port.{i}.Stats.
					optional string BytesSent = 1;
					optional string BytesReceived = 2;
					optional string PacketsSent = 3;
					optional string PacketsReceived = 4;
					optional string ErrorsSent = 5;
					optional string ErrorsReceived = 6;
					optional string UnicastPacketsSent = 7;
					optional string UnicastPacketsReceived = 8;
					optional string DiscardPacketsSent = 9;
					optional string DiscardPacketsReceived = 10;
					optional string MulticastPacketsSent = 11;
					optional string MulticastPacketsReceived = 12;
					optional string BroadcastPacketsSent = 13;
					optional string BroadcastPacketsReceived = 14;
					optional string UnknownProtoPacketsReceived = 15;
				} // 4 // Device.Bridging.Bridge.{i}.Port.{i}.Stats.
				optional Stats stats = 21; // 4
			} // 3 // Device.Bridging.Bridge.{i}.Port.{i}.
			repeated Port port = 9; // 3
			message VLAN { // 3 // Device.Bridging.Bridge.{i}.VLAN.{i}.
				optional string Enable = 1;
				optional string Alias = 2;
				optional string Name = 3;
				optional string VLANID = 4;
			} // 3 // Device.Bridging.Bridge.{i}.VLAN.{i}.
			repeated VLAN vLAN = 10; // 3
			message VLANPort { // 3 // Device.Bridging.Bridge.{i}.VLANPort.{i}.
				optional string Enable = 1;
				optional string Alias = 2;
				optional string VLAN = 3;
				optional string Port = 4;
				optional string Untagged = 5;
			} // 3 // Device.Bridging.Bridge.{i}.VLANPort.{i}.
			repeated VLANPort vLANPort = 11; // 3
		} // 2 // Device.Bridging.Bridge.{i}.
		repeated Bridge bridge = 11; // 2
		message Filter { // 2 // Device.Bridging.Filter.{i}.
			optional string Enable = 1;
			optional string Alias = 2;
			optional string Status = 3;
			optional string Bridge = 4;
			optional string Order = 5;
			optional string Interface = 6;
			optional string DHCPType = 7;
			optional string VLANIDFilter = 8;
			optional string EthertypeFilterList = 9;
			optional string EthertypeFilterExclude = 10;
			optional string SourceMACAddressFilterList = 11;
			optional string SourceMACAddressFilterExclude = 12;
			optional string DestMACAddressFilterList = 13;
			optional string DestMACAddressFilterExclude = 14;
			optional string SourceMACFromVendorClassIDFilter = 15;
			optional string SourceMACFromVendorClassIDFilterv6 = 16;
			optional string SourceMACFromVendorClassIDFilterExclude = 17;
			optional string SourceMACFromVendorClassIDMode = 18;
			optional string DestMACFromVendorClassIDFilter = 19;
			optional string DestMACFromVendorClassIDFilterv6 = 20;
			optional string DestMACFromVendorClassIDFilterExclude = 21;
			optional string DestMACFromVendorClassIDMode = 22;
			optional string SourceMACFromClientIDFilter = 23;
			optional string SourceMACFromClientIDFilterExclude = 24;
			optional string DestMACFromClientIDFilter = 25;
			optional string DestMACFromClientIDFilterExclude = 26;
			optional string SourceMACFromUserClassIDFilter = 27;
			optional string SourceMACFromUserClassIDFilterExclude = 28;
			optional string DestMACFromUserClassIDFilter = 29;
			optional string DestMACFromUserClassIDFilterExclude = 30;
			optional string DestIP = 31;
			optional string DestMask = 32;
			optional string DestIPExclude = 33;
			optional string SourceIP = 34;
			optional string SourceMask = 35;
			optional string SourceIPExclude = 36;
			optional string Protocol = 37;
			optional string ProtocolExclude = 38;
			optional string DestPort = 39;
			optional string DestPortRangeMax = 40;
			optional string DestPortExclude = 41;
			optional string SourcePort = 42;
			optional string SourcePortRangeMax = 43;
			optional string SourcePortExclude = 44;
		} // 2 // Device.Bridging.Filter.{i}.
		repeated Filter filter = 12; // 2
		message ProviderBridge { // 2 // Device.Bridging.ProviderBridge.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Type = 4;
			optional string SVLANComponent = 5;
			optional string CVLANComponents = 6;
		} // 2 // Device.Bridging.ProviderBridge.{i}.
		repeated ProviderBridge providerBridge = 13; // 2
	} // 1 // Device.Bridging.
	optional Bridging bridging = 25; // 1
	message PPP { // 1 // Device.PPP.
		optional string InterfaceNumberOfEntries = 1;
		optional string SupportedNCPs = 2;
		message Interface { // 2 // Device.PPP.Interface.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string LastChange = 5;
			optional string LowerLayers = 6;
			optional string Reset = 7;
			optional string ConnectionStatus = 8;
			optional string LastConnectionError = 9;
			optional string AutoDisconnectTime = 10;
			optional string IdleDisconnectTime = 11;
			optional string WarnDisconnectDelay = 12;
			optional string Username = 13;
			optional string Password = 14;
			optional string EncryptionProtocol = 15;
			optional string CompressionProtocol = 16;
			optional string AuthenticationProtocol = 17;
			optional string MaxMRUSize = 18;
			optional string CurrentMRUSize = 19;
			optional string ConnectionTrigger = 20;
			optional string LCPEcho = 21;
			optional string LCPEchoRetry = 22;
			optional string IPCPEnable = 23;
			optional string IPv6CPEnable = 24;
			message PPPoA { // 3 // Device.PPP.Interface.{i}.PPPoA.
			} // 3 // Device.PPP.Interface.{i}.PPPoA.
			optional PPPoA pPPoA = 26; // 3
			message PPPoE { // 3 // Device.PPP.Interface.{i}.PPPoE.
				optional string SessionID = 1;
				optional string ACName = 2;
				optional string ServiceName = 3;
			} // 3 // Device.PPP.Interface.{i}.PPPoE.
			optional PPPoE pPPoE = 27; // 3
			message IPCP { // 3 // Device.PPP.Interface.{i}.IPCP.
				optional string LocalIPAddress = 1;
				optional string RemoteIPAddress = 2;
				optional string DNSServers = 3;
				optional string PassthroughEnable = 4;
				optional string PassthroughDHCPPool = 5;
			} // 3 // Device.PPP.Interface.{i}.IPCP.
			optional IPCP iPCP = 28; // 3
			message IPv6CP { // 3 // Device.PPP.Interface.{i}.IPv6CP.
				optional string LocalInterfaceIdentifier = 1;
				optional string RemoteInterfaceIdentifier = 2;
			} // 3 // Device.PPP.Interface.{i}.IPv6CP.
			optional IPv6CP iPv6CP = 29; // 3
			message Stats { // 3 // Device.PPP.Interface.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string UnicastPacketsSent = 7;
				optional string UnicastPacketsReceived = 8;
				optional string DiscardPacketsSent = 9;
				optional string DiscardPacketsReceived = 10;
				optional string MulticastPacketsSent = 11;
				optional string MulticastPacketsReceived = 12;
				optional string BroadcastPacketsSent = 13;
				optional string BroadcastPacketsReceived = 14;
				optional string UnknownProtoPacketsReceived = 15;
			} // 3 // Device.PPP.Interface.{i}.Stats.
			optional Stats stats = 30; // 3
		} // 2 // Device.PPP.Interface.{i}.
		repeated Interface interface = 4; // 2
	} // 1 // Device.PPP.
	optional PPP pPP = 26; // 1
	message IP { // 1 // Device.IP.
		optional string IPv4Capable = 1;
		optional string IPv4Enable = 2;
		optional string IPv4Status = 3;
		optional string IPv6Capable = 4;
		optional string IPv6Enable = 5;
		optional string IPv6Status = 6;
		optional string ULAPrefix = 7;
		optional string InterfaceNumberOfEntries = 8;
		optional string ActivePortNumberOfEntries = 9;
		message Interface { // 2 // Device.IP.Interface.{i}.
			optional string Enable = 1;
			optional string IPv4Enable = 2;
			optional string IPv6Enable = 3;
			optional string ULAEnable = 4;
			optional string Status = 5;
			optional string Alias = 6;
			optional string Name = 7;
			optional string LastChange = 8;
			optional string LowerLayers = 9;
			optional string Router = 10;
			optional string Reset = 11;
			optional string MaxMTUSize = 12;
			optional string Type = 13;
			optional string Loopback = 14;
			optional string IPv4AddressNumberOfEntries = 15;
			optional string IPv6AddressNumberOfEntries = 16;
			optional string IPv6PrefixNumberOfEntries = 17;
			optional string AutoIPEnable = 18;
			message IPv4Address { // 3 // Device.IP.Interface.{i}.IPv4Address.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string Alias = 3;
				optional string IPAddress = 4;
				optional string SubnetMask = 5;
				optional string AddressingType = 6;
			} // 3 // Device.IP.Interface.{i}.IPv4Address.{i}.
			repeated IPv4Address iPv4Address = 20; // 3
			message IPv6Address { // 3 // Device.IP.Interface.{i}.IPv6Address.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string IPAddressStatus = 3;
				optional string Alias = 4;
				optional string IPAddress = 5;
				optional string Origin = 6;
				optional string Prefix = 7;
				optional string PreferredLifetime = 8;
				optional string ValidLifetime = 9;
				optional string Anycast = 10;
			} // 3 // Device.IP.Interface.{i}.IPv6Address.{i}.
			repeated IPv6Address iPv6Address = 21; // 3
			message IPv6Prefix { // 3 // Device.IP.Interface.{i}.IPv6Prefix.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string PrefixStatus = 3;
				optional string Alias = 4;
				optional string Prefix = 5;
				optional string Origin = 6;
				optional string StaticType = 7;
				optional string ParentPrefix = 8;
				optional string ChildPrefixBits = 9;
				optional string OnLink = 10;
				optional string Autonomous = 11;
				optional string PreferredLifetime = 12;
				optional string ValidLifetime = 13;
			} // 3 // Device.IP.Interface.{i}.IPv6Prefix.{i}.
			repeated IPv6Prefix iPv6Prefix = 22; // 3
			message Stats { // 3 // Device.IP.Interface.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string ErrorsReceived = 6;
				optional string UnicastPacketsSent = 7;
				optional string UnicastPacketsReceived = 8;
				optional string DiscardPacketsSent = 9;
				optional string DiscardPacketsReceived = 10;
				optional string MulticastPacketsSent = 11;
				optional string MulticastPacketsReceived = 12;
				optional string BroadcastPacketsSent = 13;
				optional string BroadcastPacketsReceived = 14;
				optional string UnknownProtoPacketsReceived = 15;
			} // 3 // Device.IP.Interface.{i}.Stats.
			optional Stats stats = 23; // 3
		} // 2 // Device.IP.Interface.{i}.
		repeated Interface interface = 11; // 2
		message ActivePort { // 2 // Device.IP.ActivePort.{i}.
			optional string LocalIPAddress = 1;
			optional string LocalPort = 2;
			optional string RemoteIPAddress = 3;
			optional string RemotePort = 4;
			optional string Status = 5;
		} // 2 // Device.IP.ActivePort.{i}.
		repeated ActivePort activePort = 12; // 2
		message Diagnostics { // 2 // Device.IP.Diagnostics.
			optional string IPv4PingSupported = 1;
			optional string IPv6PingSupported = 2;
			optional string IPv4TraceRouteSupported = 3;
			optional string IPv6TraceRouteSupported = 4;
			optional string IPv4DownloadDiagnosticsSupported = 5;
			optional string IPv6DownloadDiagnosticsSupported = 6;
			optional string IPv4UploadDiagnosticsSupported = 7;
			optional string IPv6UploadDiagnosticsSupported = 8;
			optional string IPv4UDPEchoDiagnosticsSupported = 9;
			optional string IPv6UDPEchoDiagnosticsSupported = 10;
			optional string IPv4ServerSelectionDiagnosticsSupported = 11;
			optional string IPv6ServerSelectionDiagnosticsSupported = 12;
			message IPPing { // 3 // Device.IP.Diagnostics.IPPing.
				optional string DiagnosticsState = 1;
				optional string Interface = 2;
				optional string ProtocolVersion = 3;
				optional string Host = 4;
				optional string NumberOfRepetitions = 5;
				optional string Timeout = 6;
				optional string DataBlockSize = 7;
				optional string DSCP = 8;
				optional string IPAddressUsed = 9;
				optional string SuccessCount = 10;
				optional string FailureCount = 11;
				optional string AverageResponseTime = 12;
				optional string MinimumResponseTime = 13;
				optional string MaximumResponseTime = 14;
				optional string AverageResponseTimeDetailed = 15;
				optional string MinimumResponseTimeDetailed = 16;
				optional string MaximumResponseTimeDetailed = 17;
			} // 3 // Device.IP.Diagnostics.IPPing.
			optional IPPing iPPing = 14; // 3
			message TraceRoute { // 3 // Device.IP.Diagnostics.TraceRoute.
				optional string DiagnosticsState = 1;
				optional string Interface = 2;
				optional string ProtocolVersion = 3;
				optional string Host = 4;
				optional string NumberOfTries = 5;
				optional string Timeout = 6;
				optional string DataBlockSize = 7;
				optional string DSCP = 8;
				optional string MaxHopCount = 9;
				optional string IPAddressUsed = 10;
				optional string ResponseTime = 11;
				optional string RouteHopsNumberOfEntries = 12;
				message RouteHops { // 4 // Device.IP.Diagnostics.TraceRoute.RouteHops.{i}.
					optional string Host = 1;
					optional string HostAddress = 2;
					optional string ErrorCode = 3;
					optional string RTTimes = 4;
				} // 4 // Device.IP.Diagnostics.TraceRoute.RouteHops.{i}.
				repeated RouteHops routeHops = 14; // 4
			} // 3 // Device.IP.Diagnostics.TraceRoute.
			optional TraceRoute traceRoute = 15; // 3
			message DownloadDiagnostics { // 3 // Device.IP.Diagnostics.DownloadDiagnostics.
				optional string DiagnosticsState = 1;
				optional string Interface = 2;
				optional string DownloadURL = 3;
				optional string DownloadTransports = 4;
				optional string DownloadDiagnosticMaxConnections = 5;
				optional string DownloadDiagnosticsMaxIncrementalResult = 6;
				optional string DSCP = 7;
				optional string EthernetPriority = 8;
				optional string TimeBasedTestDuration = 9;
				optional string TimeBasedTestMeasurementInterval = 10;
				optional string TimeBasedTestMeasurementOffset = 11;
				optional string ProtocolVersion = 12;
				optional string NumberOfConnections = 13;
				optional string IPAddressUsed = 14;
				optional string ROMTime = 15;
				optional string BOMTime = 16;
				optional string EOMTime = 17;
				optional string TestBytesReceived = 18;
				optional string TotalBytesReceived = 19;
				optional string TotalBytesSent = 20;
				optional string TestBytesReceivedUnderFullLoading = 21;
				optional string TotalBytesReceivedUnderFullLoading = 22;
				optional string TotalBytesSentUnderFullLoading = 23;
				optional string PeriodOfFullLoading = 24;
				optional string TCPOpenRequestTime = 25;
				optional string TCPOpenResponseTime = 26;
				optional string PerConnectionResultNumberOfEntries = 27;
				optional string EnablePerConnectionResults = 28;
				optional string IncrementalResultNumberOfEntries = 29;
				message PerConnectionResult { // 4 // Device.IP.Diagnostics.DownloadDiagnostics.PerConnectionResult.{i}.
					optional string ROMTime = 1;
					optional string BOMTime = 2;
					optional string EOMTime = 3;
					optional string TestBytesReceived = 4;
					optional string TotalBytesReceived = 5;
					optional string TotalBytesSent = 6;
					optional string TCPOpenRequestTime = 7;
					optional string TCPOpenResponseTime = 8;
				} // 4 // Device.IP.Diagnostics.DownloadDiagnostics.PerConnectionResult.{i}.
				repeated PerConnectionResult perConnectionResult = 31; // 4
				message IncrementalResult { // 4 // Device.IP.Diagnostics.DownloadDiagnostics.IncrementalResult.{i}.
					optional string TestBytesReceived = 1;
					optional string TotalBytesReceived = 2;
					optional string TotalBytesSent = 3;
					optional string StartTime = 4;
					optional string EndTime = 5;
				} // 4 // Device.IP.Diagnostics.DownloadDiagnostics.IncrementalResult.{i}.
				repeated IncrementalResult incrementalResult = 32; // 4
			} // 3 // Device.IP.Diagnostics.DownloadDiagnostics.
			optional DownloadDiagnostics downloadDiagnostics = 16; // 3
			message UploadDiagnostics { // 3 // Device.IP.Diagnostics.UploadDiagnostics.
				optional string DiagnosticsState = 1;
				optional string Interface = 2;
				optional string UploadURL = 3;
				optional string UploadTransports = 4;
				optional string UploadDiagnosticsMaxConnections = 5;
				optional string UploadDiagnosticsMaxIncrementalResult = 6;
				optional string DSCP = 7;
				optional string EthernetPriority = 8;
				optional string TestFileLength = 9;
				optional string TimeBasedTestDuration = 10;
				optional string TimeBasedTestMeasurementInterval = 11;
				optional string TimeBasedTestMeasurementOffset = 12;
				optional string ProtocolVersion = 13;
				optional string NumberOfConnections = 14;
				optional string IPAddressUsed = 15;
				optional string ROMTime = 16;
				optional string BOMTime = 17;
				optional string EOMTime = 18;
				optional string TestBytesSent = 19;
				optional string TotalBytesReceived = 20;
				optional string TotalBytesSent = 21;
				optional string TestBytesSentUnderFullLoading = 22;
				optional string TotalBytesReceivedUnderFullLoading = 23;
				optional string TotalBytesSentUnderFullLoading = 24;
				optional string PeriodOfFullLoading = 25;
				optional string TCPOpenRequestTime = 26;
				optional string TCPOpenResponseTime = 27;
				optional string PerConnectionResultNumberOfEntries = 28;
				optional string EnablePerConnectionResults = 29;
				optional string IncrementalResultNumberOfEntries = 30;
				message PerConnectionResult { // 4 // Device.IP.Diagnostics.UploadDiagnostics.PerConnectionResult.{i}.
					optional string ROMTime = 1;
					optional string BOMTime = 2;
					optional string EOMTime = 3;
					optional string TestBytesSent = 4;
					optional string TotalBytesReceived = 5;
					optional string TotalBytesSent = 6;
					optional string TCPOpenRequestTime = 7;
					optional string TCPOpenResponseTime = 8;
				} // 4 // Device.IP.Diagnostics.UploadDiagnostics.PerConnectionResult.{i}.
				repeated PerConnectionResult perConnectionResult = 32; // 4
				message IncrementalResult { // 4 // Device.IP.Diagnostics.UploadDiagnostics.IncrementalResult.{i}.
					optional string TestBytesSent = 1;
					optional string TotalBytesReceived = 2;
					optional string TotalBytesSent = 3;
					optional string StartTime = 4;
					optional string EndTime = 5;
				} // 4 // Device.IP.Diagnostics.UploadDiagnostics.IncrementalResult.{i}.
				repeated IncrementalResult incrementalResult = 33; // 4
			} // 3 // Device.IP.Diagnostics.UploadDiagnostics.
			optional UploadDiagnostics uploadDiagnostics = 17; // 3
			message UDPEchoConfig { // 3 // Device.IP.Diagnostics.UDPEchoConfig.
				optional string Enable = 1;
				optional string Interface = 2;
				optional string SourceIPAddress = 3;
				optional string UDPPort = 4;
				optional string EchoPlusEnabled = 5;
				optional string EchoPlusSupported = 6;
				optional string PacketsReceived = 7;
				optional string PacketsResponded = 8;
				optional string BytesReceived = 9;
				optional string BytesResponded = 10;
				optional string TimeFirstPacketReceived = 11;
				optional string TimeLastPacketReceived = 12;
			} // 3 // Device.IP.Diagnostics.UDPEchoConfig.
			optional UDPEchoConfig uDPEchoConfig = 18; // 3
			message UDPEchoDiagnostics { // 3 // Device.IP.Diagnostics.UDPEchoDiagnostics.
				optional string DiagnosticsState = 1;
				optional string Interface = 2;
				optional string Host = 3;
				optional string Port = 4;
				optional string NumberOfRepetitions = 5;
				optional string Timeout = 6;
				optional string DataBlockSize = 7;
				optional string DSCP = 8;
				optional string InterTransmissionTime = 9;
				optional string ProtocolVersion = 10;
				optional string IPAddressUsed = 11;
				optional string SuccessCount = 12;
				optional string FailureCount = 13;
				optional string AverageResponseTime = 14;
				optional string MinimumResponseTime = 15;
				optional string MaximumResponseTime = 16;
				optional string EnableIndividualPacketResults = 17;
				optional string IndividualPacketResultNumberOfEntries = 18;
				optional string UDPEchoDiagnosticsMaxResults = 19;
				message IndividualPacketResult { // 4 // Device.IP.Diagnostics.UDPEchoDiagnostics.IndividualPacketResult.{i}.
					optional string PacketSuccess = 1;
					optional string PacketSendTime = 2;
					optional string PacketReceiveTime = 3;
					optional string TestGenSN = 4;
					optional string TestRespSN = 5;
					optional string TestRespRcvTimeStamp = 6;
					optional string TestRespReplyTimeStamp = 7;
					optional string TestRespReplyFailureCount = 8;
				} // 4 // Device.IP.Diagnostics.UDPEchoDiagnostics.IndividualPacketResult.{i}.
				repeated IndividualPacketResult individualPacketResult = 21; // 4
			} // 3 // Device.IP.Diagnostics.UDPEchoDiagnostics.
			optional UDPEchoDiagnostics uDPEchoDiagnostics = 19; // 3
			message ServerSelectionDiagnostics { // 3 // Device.IP.Diagnostics.ServerSelectionDiagnostics.
				optional string DiagnosticsState = 1;
				optional string Interface = 2;
				optional string ProtocolVersion = 3;
				optional string Protocol = 4;
				optional string HostList = 5;
				optional string NumberOfRepetitions = 6;
				optional string Timeout = 7;
				optional string FastestHost = 8;
				optional string MinimumResponseTime = 9;
				optional string AverageResponseTime = 10;
				optional string MaximumResponseTime = 11;
				optional string IPAddressUsed = 12;
			} // 3 // Device.IP.Diagnostics.ServerSelectionDiagnostics.
			optional ServerSelectionDiagnostics serverSelectionDiagnostics = 20; // 3
		} // 2 // Device.IP.Diagnostics.
		optional Diagnostics diagnostics = 13; // 2
	} // 1 // Device.IP.
	optional IP iP = 27; // 1
	message LLDP { // 1 // Device.LLDP.
		message Discovery { // 2 // Device.LLDP.Discovery.
			optional string DeviceNumberOfEntries = 1;
			message Device { // 3 // Device.LLDP.Discovery.Device.{i}.
				optional string Interface = 1;
				optional string ChassisIDSubtype = 2;
				optional string ChassisID = 3;
				optional string Host = 4;
				optional string PortNumberOfEntries = 5;
				message Port { // 4 // Device.LLDP.Discovery.Device.{i}.Port.{i}.
					optional string PortIDSubtype = 1;
					optional string PortID = 2;
					optional string TTL = 3;
					optional string PortDescription = 4;
					optional string MACAddressList = 5;
					optional string LastUpdate = 6;
					message LinkInformation { // 5 // Device.LLDP.Discovery.Device.{i}.Port.{i}.LinkInformation.
						optional string InterfaceType = 1;
						optional string MACForwardingTable = 2;
					} // 5 // Device.LLDP.Discovery.Device.{i}.Port.{i}.LinkInformation.
					optional LinkInformation linkInformation = 8; // 5
				} // 4 // Device.LLDP.Discovery.Device.{i}.Port.{i}.
				repeated Port port = 7; // 4
				message DeviceInformation { // 4 // Device.LLDP.Discovery.Device.{i}.DeviceInformation.
					optional string DeviceCategory = 1;
					optional string ManufacturerOUI = 2;
					optional string ModelName = 3;
					optional string ModelNumber = 4;
					optional string VendorSpecificNumberOfEntries = 5;
					message VendorSpecific { // 5 // Device.LLDP.Discovery.Device.{i}.DeviceInformation.VendorSpecific.{i}.
						optional string OrganizationCode = 1;
						optional string InformationType = 2;
						optional string Information = 3;
					} // 5 // Device.LLDP.Discovery.Device.{i}.DeviceInformation.VendorSpecific.{i}.
					repeated VendorSpecific vendorSpecific = 7; // 5
				} // 4 // Device.LLDP.Discovery.Device.{i}.DeviceInformation.
				optional DeviceInformation deviceInformation = 8; // 4
			} // 3 // Device.LLDP.Discovery.Device.{i}.
			repeated Device device = 3; // 3
		} // 2 // Device.LLDP.Discovery.
		optional Discovery discovery = 2; // 2
	} // 1 // Device.LLDP.
	optional LLDP lLDP = 28; // 1
	message IPsec { // 1 // Device.IPsec.
		optional string Enable = 1;
		optional string Status = 2;
		optional string AHSupported = 3;
		optional string IKEv2SupportedEncryptionAlgorithms = 4;
		optional string ESPSupportedEncryptionAlgorithms = 5;
		optional string IKEv2SupportedPseudoRandomFunctions = 6;
		optional string SupportedIntegrityAlgorithms = 7;
		optional string SupportedDiffieHellmanGroupTransforms = 8;
		optional string MaxFilterEntries = 9;
		optional string MaxProfileEntries = 10;
		optional string FilterNumberOfEntries = 11;
		optional string ProfileNumberOfEntries = 12;
		optional string TunnelNumberOfEntries = 13;
		optional string IKEv2SANumberOfEntries = 14;
		message Stats { // 2 // Device.IPsec.Stats.
			optional string NegotiationFailures = 1;
			optional string BytesSent = 2;
			optional string BytesReceived = 3;
			optional string PacketsSent = 4;
			optional string PacketsReceived = 5;
			optional string ErrorsSent = 6;
			optional string UnknownSPIErrors = 7;
			optional string DecryptionErrors = 8;
			optional string IntegrityErrors = 9;
			optional string ReplayErrors = 10;
			optional string PolicyErrors = 11;
			optional string OtherReceiveErrors = 12;
		} // 2 // Device.IPsec.Stats.
		optional Stats stats = 16; // 2
		message Filter { // 2 // Device.IPsec.Filter.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Order = 3;
			optional string Alias = 4;
			optional string Interface = 5;
			optional string AllInterfaces = 6;
			optional string DestIP = 7;
			optional string DestMask = 8;
			optional string DestIPExclude = 9;
			optional string SourceIP = 10;
			optional string SourceMask = 11;
			optional string SourceIPExclude = 12;
			optional string Protocol = 13;
			optional string ProtocolExclude = 14;
			optional string DestPort = 15;
			optional string DestPortRangeMax = 16;
			optional string DestPortExclude = 17;
			optional string SourcePort = 18;
			optional string SourcePortRangeMax = 19;
			optional string SourcePortExclude = 20;
			optional string ProcessingChoice = 21;
			optional string Profile = 22;
		} // 2 // Device.IPsec.Filter.{i}.
		repeated Filter filter = 17; // 2
		message Profile { // 2 // Device.IPsec.Profile.{i}.
			optional string Alias = 1;
			optional string MaxChildSAs = 2;
			optional string RemoteEndpoints = 3;
			optional string ForwardingPolicy = 4;
			optional string Protocol = 5;
			optional string IKEv2AuthenticationMethod = 6;
			optional string IKEv2AllowedEncryptionAlgorithms = 7;
			optional string ESPAllowedEncryptionAlgorithms = 8;
			optional string IKEv2AllowedPseudoRandomFunctions = 9;
			optional string IKEv2AllowedIntegrityAlgorithms = 10;
			optional string AHAllowedIntegrityAlgorithms = 11;
			optional string ESPAllowedIntegrityAlgorithms = 12;
			optional string IKEv2AllowedDiffieHellmanGroupTransforms = 13;
			optional string IKEv2DeadPeerDetectionTimeout = 14;
			optional string IKEv2NATTKeepaliveTimeout = 15;
			optional string AntiReplayWindowSize = 16;
			optional string DoNotFragment = 17;
			optional string DSCPMarkPolicy = 18;
			optional string IKEv2SATrafficLimit = 19;
			optional string IKEv2SATimeLimit = 20;
			optional string IKEv2SAExpiryAction = 21;
			optional string ChildSATrafficLimit = 22;
			optional string ChildSATimeLimit = 23;
			optional string ChildSAExpiryAction = 24;
			optional string SentCPAttrNumberOfEntries = 25;
			message SentCPAttr { // 3 // Device.IPsec.Profile.{i}.SentCPAttr.{i}.
				optional string Enable = 1;
				optional string Alias = 2;
				optional string Type = 3;
				optional string Value = 4;
			} // 3 // Device.IPsec.Profile.{i}.SentCPAttr.{i}.
			repeated SentCPAttr sentCPAttr = 27; // 3
		} // 2 // Device.IPsec.Profile.{i}.
		repeated Profile profile = 18; // 2
		message Tunnel { // 2 // Device.IPsec.Tunnel.{i}.
			optional string Alias = 1;
			optional string TunnelInterface = 2;
			optional string TunneledInterface = 3;
			optional string Filters = 4;
			message Stats { // 3 // Device.IPsec.Tunnel.{i}.Stats.
				optional string DecryptionErrors = 1;
				optional string IntegrityErrors = 2;
				optional string ReplayErrors = 3;
				optional string PolicyErrors = 4;
				optional string OtherReceiveErrors = 5;
			} // 3 // Device.IPsec.Tunnel.{i}.Stats.
			optional Stats stats = 6; // 3
		} // 2 // Device.IPsec.Tunnel.{i}.
		repeated Tunnel tunnel = 19; // 2
		message IKEv2SA { // 2 // Device.IPsec.IKEv2SA.{i}.
			optional string Status = 1;
			optional string Alias = 2;
			optional string Tunnel = 3;
			optional string LocalAddress = 4;
			optional string RemoteAddress = 5;
			optional string EncryptionAlgorithm = 6;
			optional string EncryptionKeyLength = 7;
			optional string PseudoRandomFunction = 8;
			optional string IntegrityAlgorithm = 9;
			optional string DiffieHellmanGroupTransform = 10;
			optional string CreationTime = 11;
			optional string NATDetected = 12;
			optional string ReceivedCPAttrNumberOfEntries = 13;
			optional string ChildSANumberOfEntries = 14;
			message Stats { // 3 // Device.IPsec.IKEv2SA.{i}.Stats.
				optional string BytesSent = 1;
				optional string BytesReceived = 2;
				optional string PacketsSent = 3;
				optional string PacketsReceived = 4;
				optional string ErrorsSent = 5;
				optional string DecryptionErrors = 6;
				optional string IntegrityErrors = 7;
				optional string OtherReceiveErrors = 8;
			} // 3 // Device.IPsec.IKEv2SA.{i}.Stats.
			optional Stats stats = 16; // 3
			message ReceivedCPAttr { // 3 // Device.IPsec.IKEv2SA.{i}.ReceivedCPAttr.{i}.
				optional string Type = 1;
				optional string Value = 2;
			} // 3 // Device.IPsec.IKEv2SA.{i}.ReceivedCPAttr.{i}.
			repeated ReceivedCPAttr receivedCPAttr = 17; // 3
			message ChildSA { // 3 // Device.IPsec.IKEv2SA.{i}.ChildSA.{i}.
				optional string Status = 1;
				optional string Alias = 2;
				optional string InboundSPI = 3;
				optional string OutboundSPI = 4;
				optional string CreationTime = 5;
				message Stats { // 4 // Device.IPsec.IKEv2SA.{i}.ChildSA.{i}.Stats.
					optional string BytesSent = 1;
					optional string BytesReceived = 2;
					optional string PacketsSent = 3;
					optional string PacketsReceived = 4;
					optional string ErrorsSent = 5;
					optional string DecryptionErrors = 6;
					optional string IntegrityErrors = 7;
					optional string ReplayErrors = 8;
					optional string PolicyErrors = 9;
					optional string OtherReceiveErrors = 10;
				} // 4 // Device.IPsec.IKEv2SA.{i}.ChildSA.{i}.Stats.
				optional Stats stats = 7; // 4
			} // 3 // Device.IPsec.IKEv2SA.{i}.ChildSA.{i}.
			repeated ChildSA childSA = 18; // 3
		} // 2 // Device.IPsec.IKEv2SA.{i}.
		repeated IKEv2SA iKEv2SA = 20; // 2
	} // 1 // Device.IPsec.
	optional IPsec iPsec = 29; // 1
	message GRE { // 1 // Device.GRE.
		optional string TunnelNumberOfEntries = 1;
		optional string FilterNumberOfEntries = 2;
		message Tunnel { // 2 // Device.GRE.Tunnel.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string RemoteEndpoints = 4;
			optional string KeepAlivePolicy = 5;
			optional string KeepAliveTimeout = 6;
			optional string KeepAliveThreshold = 7;
			optional string DeliveryHeaderProtocol = 8;
			optional string DefaultDSCPMark = 9;
			optional string ConnectedRemoteEndpoint = 10;
			optional string InterfaceNumberOfEntries = 11;
			message Stats { // 3 // Device.GRE.Tunnel.{i}.Stats.
				optional string KeepAliveSent = 1;
				optional string KeepAliveReceived = 2;
				optional string BytesSent = 3;
				optional string BytesReceived = 4;
				optional string PacketsSent = 5;
				optional string PacketsReceived = 6;
				optional string ErrorsSent = 7;
				optional string ErrorsReceived = 8;
			} // 3 // Device.GRE.Tunnel.{i}.Stats.
			optional Stats stats = 13; // 3
			message Interface { // 3 // Device.GRE.Tunnel.{i}.Interface.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string Alias = 3;
				optional string Name = 4;
				optional string LastChange = 5;
				optional string LowerLayers = 6;
				optional string ProtocolIdOverride = 7;
				optional string UseChecksum = 8;
				optional string KeyIdentifierGenerationPolicy = 9;
				optional string KeyIdentifier = 10;
				optional string UseSequenceNumber = 11;
				message Stats { // 4 // Device.GRE.Tunnel.{i}.Interface.{i}.Stats.
					optional string BytesSent = 1;
					optional string BytesReceived = 2;
					optional string PacketsSent = 3;
					optional string PacketsReceived = 4;
					optional string ErrorsSent = 5;
					optional string ErrorsReceived = 6;
					optional string DiscardChecksumReceived = 7;
					optional string DiscardSequenceNumberReceived = 8;
				} // 4 // Device.GRE.Tunnel.{i}.Interface.{i}.Stats.
				optional Stats stats = 13; // 4
			} // 3 // Device.GRE.Tunnel.{i}.Interface.{i}.
			repeated Interface interface = 14; // 3
		} // 2 // Device.GRE.Tunnel.{i}.
		repeated Tunnel tunnel = 4; // 2
		message Filter { // 2 // Device.GRE.Filter.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Order = 3;
			optional string Alias = 4;
			optional string Interface = 5;
			optional string AllInterfaces = 6;
			optional string VLANIDCheck = 7;
			optional string VLANIDExclude = 8;
			optional string DSCPMarkPolicy = 9;
		} // 2 // Device.GRE.Filter.{i}.
		repeated Filter filter = 5; // 2
	} // 1 // Device.GRE.
	optional GRE gRE = 30; // 1
	message MAP { // 1 // Device.MAP.
		optional string Enable = 1;
		optional string DomainNumberOfEntries = 2;
		message Domain { // 2 // Device.MAP.Domain.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string TransportMode = 4;
			optional string WANInterface = 5;
			optional string IPv6Prefix = 6;
			optional string BRIPv6Prefix = 7;
			optional string DSCPMarkPolicy = 8;
			optional string PSIDOffset = 9;
			optional string PSIDLength = 10;
			optional string PSID = 11;
			optional string IncludeSystemPorts = 12;
			optional string RuleNumberOfEntries = 13;
			message Rule { // 3 // Device.MAP.Domain.{i}.Rule.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string Alias = 3;
				optional string Origin = 4;
				optional string IPv6Prefix = 5;
				optional string IPv4Prefix = 6;
				optional string EABitsLength = 7;
				optional string IsFMR = 8;
			} // 3 // Device.MAP.Domain.{i}.Rule.{i}.
			repeated Rule rule = 15; // 3
			message Interface { // 3 // Device.MAP.Domain.{i}.Interface.
				optional string Enable = 1;
				optional string Status = 2;
				optional string Alias = 3;
				optional string Name = 4;
				optional string LastChange = 5;
				optional string LowerLayers = 6;
				message Stats { // 4 // Device.MAP.Domain.{i}.Interface.Stats.
					optional string BytesSent = 1;
					optional string BytesReceived = 2;
					optional string PacketsSent = 3;
					optional string PacketsReceived = 4;
					optional string ErrorsSent = 5;
					optional string ErrorsReceived = 6;
					optional string UnicastPacketsSent = 7;
					optional string UnicastPacketsReceived = 8;
					optional string DiscardPacketsSent = 9;
					optional string DiscardPacketsReceived = 10;
					optional string MulticastPacketsSent = 11;
					optional string MulticastPacketsReceived = 12;
					optional string BroadcastPacketsSent = 13;
					optional string BroadcastPacketsReceived = 14;
					optional string UnknownProtoPacketsReceived = 15;
				} // 4 // Device.MAP.Domain.{i}.Interface.Stats.
				optional Stats stats = 8; // 4
			} // 3 // Device.MAP.Domain.{i}.Interface.
			optional Interface interface = 16; // 3
		} // 2 // Device.MAP.Domain.{i}.
		repeated Domain domain = 4; // 2
	} // 1 // Device.MAP.
	optional MAP mAP = 31; // 1
	message CaptivePortal { // 1 // Device.CaptivePortal.
		optional string Enable = 1;
		optional string Status = 2;
		optional string AllowedList = 3;
		optional string URL = 4;
	} // 1 // Device.CaptivePortal.
	optional CaptivePortal captivePortal = 32; // 1
	message Routing { // 1 // Device.Routing.
		optional string RouterNumberOfEntries = 1;
		message Router { // 2 // Device.Routing.Router.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string IPv4ForwardingNumberOfEntries = 4;
			optional string IPv6ForwardingNumberOfEntries = 5;
			message IPv4Forwarding { // 3 // Device.Routing.Router.{i}.IPv4Forwarding.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string Alias = 3;
				optional string StaticRoute = 4;
				optional string DestIPAddress = 5;
				optional string DestSubnetMask = 6;
				optional string ForwardingPolicy = 7;
				optional string GatewayIPAddress = 8;
				optional string Interface = 9;
				optional string Origin = 10;
				optional string ForwardingMetric = 11;
			} // 3 // Device.Routing.Router.{i}.IPv4Forwarding.{i}.
			repeated IPv4Forwarding iPv4Forwarding = 7; // 3
			message IPv6Forwarding { // 3 // Device.Routing.Router.{i}.IPv6Forwarding.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string Alias = 3;
				optional string DestIPPrefix = 4;
				optional string ForwardingPolicy = 5;
				optional string NextHop = 6;
				optional string Interface = 7;
				optional string Origin = 8;
				optional string ForwardingMetric = 9;
				optional string ExpirationTime = 10;
			} // 3 // Device.Routing.Router.{i}.IPv6Forwarding.{i}.
			repeated IPv6Forwarding iPv6Forwarding = 8; // 3
		} // 2 // Device.Routing.Router.{i}.
		repeated Router router = 3; // 2
		message RIP { // 2 // Device.Routing.RIP.
			optional string Enable = 1;
			optional string SupportedModes = 2;
			optional string InterfaceSettingNumberOfEntries = 3;
			message InterfaceSetting { // 3 // Device.Routing.RIP.InterfaceSetting.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string Alias = 3;
				optional string Interface = 4;
				optional string AcceptRA = 5;
				optional string SendRA = 6;
			} // 3 // Device.Routing.RIP.InterfaceSetting.{i}.
			repeated InterfaceSetting interfaceSetting = 5; // 3
		} // 2 // Device.Routing.RIP.
		optional RIP rIP = 4; // 2
		message RouteInformation { // 2 // Device.Routing.RouteInformation.
			optional string Enable = 1;
			optional string InterfaceSettingNumberOfEntries = 2;
			message InterfaceSetting { // 3 // Device.Routing.RouteInformation.InterfaceSetting.{i}.
				optional string Status = 1;
				optional string Interface = 2;
				optional string SourceRouter = 3;
				optional string PreferredRouteFlag = 4;
				optional string Prefix = 5;
				optional string RouteLifetime = 6;
			} // 3 // Device.Routing.RouteInformation.InterfaceSetting.{i}.
			repeated InterfaceSetting interfaceSetting = 4; // 3
		} // 2 // Device.Routing.RouteInformation.
		optional RouteInformation routeInformation = 5; // 2
	} // 1 // Device.Routing.
	optional Routing routing = 33; // 1
	message NeighborDiscovery { // 1 // Device.NeighborDiscovery.
		optional string Enable = 1;
		optional string InterfaceSettingNumberOfEntries = 2;
		message InterfaceSetting { // 2 // Device.NeighborDiscovery.InterfaceSetting.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Interface = 4;
			optional string RetransTimer = 5;
			optional string RtrSolicitationInterval = 6;
			optional string MaxRtrSolicitations = 7;
			optional string NUDEnable = 8;
			optional string RSEnable = 9;
		} // 2 // Device.NeighborDiscovery.InterfaceSetting.{i}.
		repeated InterfaceSetting interfaceSetting = 4; // 2
	} // 1 // Device.NeighborDiscovery.
	optional NeighborDiscovery neighborDiscovery = 34; // 1
	message RouterAdvertisement { // 1 // Device.RouterAdvertisement.
		optional string Enable = 1;
		optional string InterfaceSettingNumberOfEntries = 2;
		message InterfaceSetting { // 2 // Device.RouterAdvertisement.InterfaceSetting.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Interface = 4;
			optional string ManualPrefixes = 5;
			optional string Prefixes = 6;
			optional string MaxRtrAdvInterval = 7;
			optional string MinRtrAdvInterval = 8;
			optional string AdvDefaultLifetime = 9;
			optional string AdvManagedFlag = 10;
			optional string AdvOtherConfigFlag = 11;
			optional string AdvMobileAgentFlag = 12;
			optional string AdvPreferredRouterFlag = 13;
			optional string AdvNDProxyFlag = 14;
			optional string AdvLinkMTU = 15;
			optional string AdvReachableTime = 16;
			optional string AdvRetransTimer = 17;
			optional string AdvCurHopLimit = 18;
			optional string OptionNumberOfEntries = 19;
			message Option { // 3 // Device.RouterAdvertisement.InterfaceSetting.{i}.Option.{i}.
				optional string Enable = 1;
				optional string Alias = 2;
				optional string Tag = 3;
				optional string Value = 4;
			} // 3 // Device.RouterAdvertisement.InterfaceSetting.{i}.Option.{i}.
			repeated Option option = 21; // 3
		} // 2 // Device.RouterAdvertisement.InterfaceSetting.{i}.
		repeated InterfaceSetting interfaceSetting = 4; // 2
	} // 1 // Device.RouterAdvertisement.
	optional RouterAdvertisement routerAdvertisement = 35; // 1
	message IPv6rd { // 1 // Device.IPv6rd.
		optional string Enable = 1;
		optional string InterfaceSettingNumberOfEntries = 2;
		message InterfaceSetting { // 2 // Device.IPv6rd.InterfaceSetting.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string BorderRelayIPv4Addresses = 4;
			optional string AllTrafficToBorderRelay = 5;
			optional string SPIPv6Prefix = 6;
			optional string IPv4MaskLength = 7;
			optional string AddressSource = 8;
			optional string TunnelInterface = 9;
			optional string TunneledInterface = 10;
		} // 2 // Device.IPv6rd.InterfaceSetting.{i}.
		repeated InterfaceSetting interfaceSetting = 4; // 2
	} // 1 // Device.IPv6rd.
	optional IPv6rd iPv6rd = 36; // 1
	message DSLite { // 1 // Device.DSLite.
		optional string Enable = 1;
		optional string InterfaceSettingNumberOfEntries = 2;
		message InterfaceSetting { // 2 // Device.DSLite.InterfaceSetting.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string EndpointAssignmentPrecedence = 4;
			optional string EndpointAddressTypePrecedence = 5;
			optional string EndpointAddressInUse = 6;
			optional string EndpointName = 7;
			optional string EndpointAddress = 8;
			optional string Origin = 9;
			optional string TunnelInterface = 10;
			optional string TunneledInterface = 11;
		} // 2 // Device.DSLite.InterfaceSetting.{i}.
		repeated InterfaceSetting interfaceSetting = 4; // 2
	} // 1 // Device.DSLite.
	optional DSLite dSLite = 37; // 1
	message QoS { // 1 // Device.QoS.
		optional string MaxClassificationEntries = 1;
		optional string ClassificationNumberOfEntries = 2;
		optional string MaxAppEntries = 3;
		optional string AppNumberOfEntries = 4;
		optional string MaxFlowEntries = 5;
		optional string FlowNumberOfEntries = 6;
		optional string MaxPolicerEntries = 7;
		optional string PolicerNumberOfEntries = 8;
		optional string MaxQueueEntries = 9;
		optional string QueueNumberOfEntries = 10;
		optional string QueueStatsNumberOfEntries = 11;
		optional string MaxShaperEntries = 12;
		optional string ShaperNumberOfEntries = 13;
		optional string DefaultForwardingPolicy = 14;
		optional string DefaultTrafficClass = 15;
		optional string DefaultPolicer = 16;
		optional string DefaultQueue = 17;
		optional string DefaultDSCPMark = 18;
		optional string DefaultEthernetPriorityMark = 19;
		optional string DefaultInnerEthernetPriorityMark = 20;
		optional string AvailableAppList = 21;
		message Classification { // 2 // Device.QoS.Classification.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Order = 3;
			optional string Alias = 4;
			optional string DHCPType = 5;
			optional string Interface = 6;
			optional string AllInterfaces = 7;
			optional string DestIP = 8;
			optional string DestMask = 9;
			optional string DestIPExclude = 10;
			optional string SourceIP = 11;
			optional string SourceMask = 12;
			optional string SourceIPExclude = 13;
			optional string Protocol = 14;
			optional string ProtocolExclude = 15;
			optional string DestPort = 16;
			optional string DestPortRangeMax = 17;
			optional string DestPortExclude = 18;
			optional string SourcePort = 19;
			optional string SourcePortRangeMax = 20;
			optional string SourcePortExclude = 21;
			optional string SourceMACAddress = 22;
			optional string SourceMACMask = 23;
			optional string SourceMACExclude = 24;
			optional string DestMACAddress = 25;
			optional string DestMACMask = 26;
			optional string DestMACExclude = 27;
			optional string Ethertype = 28;
			optional string EthertypeExclude = 29;
			optional string SSAP = 30;
			optional string SSAPExclude = 31;
			optional string DSAP = 32;
			optional string DSAPExclude = 33;
			optional string LLCControl = 34;
			optional string LLCControlExclude = 35;
			optional string SNAPOUI = 36;
			optional string SNAPOUIExclude = 37;
			optional string SourceVendorClassID = 38;
			optional string SourceVendorClassIDv6 = 39;
			optional string SourceVendorClassIDExclude = 40;
			optional string SourceVendorClassIDMode = 41;
			optional string DestVendorClassID = 42;
			optional string DestVendorClassIDv6 = 43;
			optional string DestVendorClassIDExclude = 44;
			optional string DestVendorClassIDMode = 45;
			optional string SourceClientID = 46;
			optional string SourceClientIDExclude = 47;
			optional string DestClientID = 48;
			optional string DestClientIDExclude = 49;
			optional string SourceUserClassID = 50;
			optional string SourceUserClassIDExclude = 51;
			optional string DestUserClassID = 52;
			optional string DestUserClassIDExclude = 53;
			optional string SourceVendorSpecificInfo = 54;
			optional string SourceVendorSpecificInfoExclude = 55;
			optional string SourceVendorSpecificInfoEnterprise = 56;
			optional string SourceVendorSpecificInfoSubOption = 57;
			optional string DestVendorSpecificInfo = 58;
			optional string DestVendorSpecificInfoExclude = 59;
			optional string DestVendorSpecificInfoEnterprise = 60;
			optional string DestVendorSpecificInfoSubOption = 61;
			optional string TCPACK = 62;
			optional string TCPACKExclude = 63;
			optional string IPLengthMin = 64;
			optional string IPLengthMax = 65;
			optional string IPLengthExclude = 66;
			optional string DSCPCheck = 67;
			optional string DSCPExclude = 68;
			optional string DSCPMark = 69;
			optional string EthernetPriorityCheck = 70;
			optional string EthernetPriorityExclude = 71;
			optional string EthernetPriorityMark = 72;
			optional string InnerEthernetPriorityCheck = 73;
			optional string InnerEthernetPriorityExclude = 74;
			optional string InnerEthernetPriorityMark = 75;
			optional string EthernetDEICheck = 76;
			optional string EthernetDEIExclude = 77;
			optional string VLANIDCheck = 78;
			optional string VLANIDExclude = 79;
			optional string OutOfBandInfo = 80;
			optional string ForwardingPolicy = 81;
			optional string TrafficClass = 82;
			optional string Policer = 83;
			optional string App = 84;
		} // 2 // Device.QoS.Classification.{i}.
		repeated Classification classification = 23; // 2
		message App { // 2 // Device.QoS.App.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string ProtocolIdentifier = 4;
			optional string Name = 5;
			optional string DefaultForwardingPolicy = 6;
			optional string DefaultTrafficClass = 7;
			optional string DefaultPolicer = 8;
			optional string DefaultDSCPMark = 9;
			optional string DefaultEthernetPriorityMark = 10;
			optional string DefaultInnerEthernetPriorityMark = 11;
		} // 2 // Device.QoS.App.{i}.
		repeated App app = 24; // 2
		message Flow { // 2 // Device.QoS.Flow.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Type = 4;
			optional string TypeParameters = 5;
			optional string Name = 6;
			optional string App = 7;
			optional string ForwardingPolicy = 8;
			optional string TrafficClass = 9;
			optional string Policer = 10;
			optional string DSCPMark = 11;
			optional string EthernetPriorityMark = 12;
			optional string InnerEthernetPriorityMark = 13;
		} // 2 // Device.QoS.Flow.{i}.
		repeated Flow flow = 25; // 2
		message Policer { // 2 // Device.QoS.Policer.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string CommittedRate = 4;
			optional string CommittedBurstSize = 5;
			optional string ExcessBurstSize = 6;
			optional string PeakRate = 7;
			optional string PeakBurstSize = 8;
			optional string MeterType = 9;
			optional string PossibleMeterTypes = 10;
			optional string ConformingAction = 11;
			optional string PartialConformingAction = 12;
			optional string NonConformingAction = 13;
			optional string TotalCountedPackets = 14;
			optional string TotalCountedBytes = 15;
			optional string ConformingCountedPackets = 16;
			optional string ConformingCountedBytes = 17;
			optional string PartiallyConformingCountedPackets = 18;
			optional string PartiallyConformingCountedBytes = 19;
			optional string NonConformingCountedPackets = 20;
			optional string NonConformingCountedBytes = 21;
		} // 2 // Device.QoS.Policer.{i}.
		repeated Policer policer = 26; // 2
		message Queue { // 2 // Device.QoS.Queue.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string TrafficClasses = 4;
			optional string Interface = 5;
			optional string AllInterfaces = 6;
			optional string HardwareAssisted = 7;
			optional string BufferLength = 8;
			optional string Weight = 9;
			optional string Precedence = 10;
			optional string REDThreshold = 11;
			optional string REDPercentage = 12;
			optional string DropAlgorithm = 13;
			optional string SchedulerAlgorithm = 14;
			optional string ShapingRate = 15;
			optional string ShapingBurstSize = 16;
		} // 2 // Device.QoS.Queue.{i}.
		repeated Queue queue = 27; // 2
		message QueueStats { // 2 // Device.QoS.QueueStats.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Queue = 4;
			optional string Interface = 5;
			optional string OutputPackets = 6;
			optional string OutputBytes = 7;
			optional string DroppedPackets = 8;
			optional string DroppedBytes = 9;
			optional string QueueOccupancyPackets = 10;
			optional string QueueOccupancyPercentage = 11;
		} // 2 // Device.QoS.QueueStats.{i}.
		repeated QueueStats queueStats = 28; // 2
		message Shaper { // 2 // Device.QoS.Shaper.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Interface = 4;
			optional string ShapingRate = 5;
			optional string ShapingBurstSize = 6;
		} // 2 // Device.QoS.Shaper.{i}.
		repeated Shaper shaper = 29; // 2
	} // 1 // Device.QoS.
	optional QoS qoS = 38; // 1
	message LANConfigSecurity { // 1 // Device.LANConfigSecurity.
		optional string ConfigPassword = 1;
	} // 1 // Device.LANConfigSecurity.
	optional LANConfigSecurity lANConfigSecurity = 39; // 1
	message Hosts { // 1 // Device.Hosts.
		optional string HostNumberOfEntries = 1;
		message Host { // 2 // Device.Hosts.Host.{i}.
			optional string Alias = 1;
			optional string PhysAddress = 2;
			optional string IPAddress = 3;
			optional string AddressSource = 4;
			optional string DHCPClient = 5;
			optional string LeaseTimeRemaining = 6;
			optional string AssociatedDevice = 7;
			optional string Layer1Interface = 8;
			optional string Layer3Interface = 9;
			optional string VendorClassID = 10;
			optional string ClientID = 11;
			optional string UserClassID = 12;
			optional string HostName = 13;
			optional string Active = 14;
			optional string ActiveLastChange = 15;
			optional string IPv4AddressNumberOfEntries = 16;
			optional string IPv6AddressNumberOfEntries = 17;
			message IPv4Address { // 3 // Device.Hosts.Host.{i}.IPv4Address.{i}.
				optional string IPAddress = 1;
			} // 3 // Device.Hosts.Host.{i}.IPv4Address.{i}.
			repeated IPv4Address iPv4Address = 19; // 3
			message IPv6Address { // 3 // Device.Hosts.Host.{i}.IPv6Address.{i}.
				optional string IPAddress = 1;
			} // 3 // Device.Hosts.Host.{i}.IPv6Address.{i}.
			repeated IPv6Address iPv6Address = 20; // 3
		} // 2 // Device.Hosts.Host.{i}.
		repeated Host host = 3; // 2
	} // 1 // Device.Hosts.
	optional Hosts hosts = 40; // 1
	message DNS { // 1 // Device.DNS.
		optional string SupportedRecordTypes = 1;
		message Client { // 2 // Device.DNS.Client.
			optional string Enable = 1;
			optional string Status = 2;
			optional string ServerNumberOfEntries = 3;
			message Server { // 3 // Device.DNS.Client.Server.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string Alias = 3;
				optional string DNSServer = 4;
				optional string Interface = 5;
				optional string Type = 6;
			} // 3 // Device.DNS.Client.Server.{i}.
			repeated Server server = 5; // 3
		} // 2 // Device.DNS.Client.
		optional Client client = 3; // 2
		message Relay { // 2 // Device.DNS.Relay.
			optional string Enable = 1;
			optional string Status = 2;
			optional string ForwardNumberOfEntries = 3;
			message Forwarding { // 3 // Device.DNS.Relay.Forwarding.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string Alias = 3;
				optional string DNSServer = 4;
				optional string Interface = 5;
				optional string Type = 6;
			} // 3 // Device.DNS.Relay.Forwarding.{i}.
			repeated Forwarding forwarding = 5; // 3
		} // 2 // Device.DNS.Relay.
		optional Relay relay = 4; // 2
		message Diagnostics { // 2 // Device.DNS.Diagnostics.
			message NSLookupDiagnostics { // 3 // Device.DNS.Diagnostics.NSLookupDiagnostics.
				optional string DiagnosticsState = 1;
				optional string Interface = 2;
				optional string HostName = 3;
				optional string DNSServer = 4;
				optional string Timeout = 5;
				optional string NumberOfRepetitions = 6;
				optional string SuccessCount = 7;
				optional string ResultNumberOfEntries = 8;
				message Result { // 4 // Device.DNS.Diagnostics.NSLookupDiagnostics.Result.{i}.
					optional string Status = 1;
					optional string AnswerType = 2;
					optional string HostNameReturned = 3;
					optional string IPAddresses = 4;
					optional string DNSServerIP = 5;
					optional string ResponseTime = 6;
				} // 4 // Device.DNS.Diagnostics.NSLookupDiagnostics.Result.{i}.
				repeated Result result = 10; // 4
			} // 3 // Device.DNS.Diagnostics.NSLookupDiagnostics.
			optional NSLookupDiagnostics nSLookupDiagnostics = 2; // 3
		} // 2 // Device.DNS.Diagnostics.
		optional Diagnostics diagnostics = 5; // 2
		message SD { // 2 // Device.DNS.SD.
			optional string Enable = 1;
			optional string ServiceNumberOfEntries = 2;
			message Service { // 3 // Device.DNS.SD.Service.{i}.
				optional string InstanceName = 1;
				optional string ApplicationProtocol = 2;
				optional string TransportProtocol = 3;
				optional string Domain = 4;
				optional string Port = 5;
				optional string Target = 6;
				optional string Status = 7;
				optional string LastUpdate = 8;
				optional string Host = 9;
				optional string TimeToLive = 10;
				optional string Priority = 11;
				optional string Weight = 12;
				optional string TextRecordNumberOfEntries = 13;
				message TextRecord { // 4 // Device.DNS.SD.Service.{i}.TextRecord.{i}.
					optional string Key = 1;
					optional string Value = 2;
				} // 4 // Device.DNS.SD.Service.{i}.TextRecord.{i}.
				repeated TextRecord textRecord = 15; // 4
			} // 3 // Device.DNS.SD.Service.{i}.
			repeated Service service = 4; // 3
		} // 2 // Device.DNS.SD.
		optional SD sD = 6; // 2
	} // 1 // Device.DNS.
	optional DNS dNS = 41; // 1
	message NAT { // 1 // Device.NAT.
		optional string InterfaceSettingNumberOfEntries = 1;
		optional string PortMappingNumberOfEntries = 2;
		message InterfaceSetting { // 2 // Device.NAT.InterfaceSetting.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Interface = 4;
		} // 2 // Device.NAT.InterfaceSetting.{i}.
		repeated InterfaceSetting interfaceSetting = 4; // 2
		message PortMapping { // 2 // Device.NAT.PortMapping.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Interface = 4;
			optional string AllInterfaces = 5;
			optional string LeaseDuration = 6;
			optional string RemoteHost = 7;
			optional string ExternalPort = 8;
			optional string ExternalPortEndRange = 9;
			optional string InternalPort = 10;
			optional string Protocol = 11;
			optional string InternalClient = 12;
			optional string Description = 13;
		} // 2 // Device.NAT.PortMapping.{i}.
		repeated PortMapping portMapping = 5; // 2
	} // 1 // Device.NAT.
	optional NAT nAT = 42; // 1
	message PCP { // 1 // Device.PCP.
		optional string SupportedVersions = 1;
		optional string PreferredVersion = 2;
		optional string OptionList = 3;
		optional string ClientNumberOfEntries = 4;
		message Client { // 2 // Device.PCP.Client.{i}.
			optional string Enable = 1;
			optional string Alias = 2;
			optional string WANInterface = 3;
			optional string Status = 4;
			optional string MAPEnable = 5;
			optional string PEEREnable = 6;
			optional string ANNOUNCEEnable = 7;
			optional string THIRDPARTYEnable = 8;
			optional string THIRDPARTYStatus = 9;
			optional string FILTEREnable = 10;
			optional string ServerNumberOfEntries = 11;
			message PCPProxy { // 3 // Device.PCP.Client.{i}.PCPProxy.
				optional string Enable = 1;
				optional string HighestVersion = 2;
				optional string Status = 3;
			} // 3 // Device.PCP.Client.{i}.PCPProxy.
			optional PCPProxy pCPProxy = 13; // 3
			message UPnPIWF { // 3 // Device.PCP.Client.{i}.UPnPIWF.
				optional string Enable = 1;
				optional string Status = 2;
			} // 3 // Device.PCP.Client.{i}.UPnPIWF.
			optional UPnPIWF uPnPIWF = 14; // 3
			message Server { // 3 // Device.PCP.Client.{i}.Server.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string Alias = 3;
				optional string Origin = 4;
				optional string ServerNameOrAddress = 5;
				optional string ServerAddressInUse = 6;
				optional string AdditionalServerAddresses = 7;
				optional string ExternalIPAddress = 8;
				optional string CurrentVersion = 9;
				optional string MaximumFilters = 10;
				optional string PortQuota = 11;
				optional string PreferredLifetime = 12;
				optional string Capabilities = 13;
				optional string InboundMappingNumberOfEntries = 14;
				optional string OutboundMappingNumberOfEntries = 15;
				message InboundMapping { // 4 // Device.PCP.Client.{i}.Server.{i}.InboundMapping.{i}.
					optional string Enable = 1;
					optional string Status = 2;
					optional string ErrorCode = 3;
					optional string Alias = 4;
					optional string Origin = 5;
					optional string Lifetime = 6;
					optional string SuggestedExternalIPAddress = 7;
					optional string SuggestedExternalPort = 8;
					optional string SuggestedExternalPortEndRange = 9;
					optional string InternalPort = 10;
					optional string ProtocolNumber = 11;
					optional string ThirdPartyAddress = 12;
					optional string Description = 13;
					optional string AssignedExternalIPAddress = 14;
					optional string AssignedExternalPort = 15;
					optional string AssignedExternalPortEndRange = 16;
					optional string FilterNumberOfEntries = 17;
					message Filter { // 5 // Device.PCP.Client.{i}.Server.{i}.InboundMapping.{i}.Filter.{i}.
						optional string Alias = 1;
						optional string RemoteHostIPAddress = 2;
						optional string PrefixLength = 3;
						optional string RemotePort = 4;
						optional string RemotePortEndRange = 5;
					} // 5 // Device.PCP.Client.{i}.Server.{i}.InboundMapping.{i}.Filter.{i}.
					repeated Filter filter = 19; // 5
				} // 4 // Device.PCP.Client.{i}.Server.{i}.InboundMapping.{i}.
				repeated InboundMapping inboundMapping = 17; // 4
				message OutboundMapping { // 4 // Device.PCP.Client.{i}.Server.{i}.OutboundMapping.{i}.
					optional string Enable = 1;
					optional string Status = 2;
					optional string ErrorCode = 3;
					optional string Alias = 4;
					optional string Origin = 5;
					optional string Lifetime = 6;
					optional string SuggestedExternalIPAddress = 7;
					optional string SuggestedExternalPort = 8;
					optional string RemoteHostIPAddress = 9;
					optional string InternalPort = 10;
					optional string RemotePort = 11;
					optional string ProtocolNumber = 12;
					optional string ThirdPartyAddress = 13;
					optional string Description = 14;
					optional string AssignedExternalIPAddress = 15;
					optional string AssignedExternalPort = 16;
				} // 4 // Device.PCP.Client.{i}.Server.{i}.OutboundMapping.{i}.
				repeated OutboundMapping outboundMapping = 18; // 4
			} // 3 // Device.PCP.Client.{i}.Server.{i}.
			repeated Server server = 15; // 3
		} // 2 // Device.PCP.Client.{i}.
		repeated Client client = 6; // 2
	} // 1 // Device.PCP.
	optional PCP pCP = 43; // 1
	message DHCPv4 { // 1 // Device.DHCPv4.
		optional string ClientNumberOfEntries = 1;
		message Client { // 2 // Device.DHCPv4.Client.{i}.
			optional string Enable = 1;
			optional string Alias = 2;
			optional string Interface = 3;
			optional string Status = 4;
			optional string DHCPStatus = 5;
			optional string Renew = 6;
			optional string IPAddress = 7;
			optional string SubnetMask = 8;
			optional string IPRouters = 9;
			optional string DNSServers = 10;
			optional string LeaseTimeRemaining = 11;
			optional string DHCPServer = 12;
			optional string PassthroughEnable = 13;
			optional string PassthroughDHCPPool = 14;
			optional string SentOptionNumberOfEntries = 15;
			optional string ReqOptionNumberOfEntries = 16;
			message SentOption { // 3 // Device.DHCPv4.Client.{i}.SentOption.{i}.
				optional string Enable = 1;
				optional string Alias = 2;
				optional string Tag = 3;
				optional string Value = 4;
			} // 3 // Device.DHCPv4.Client.{i}.SentOption.{i}.
			repeated SentOption sentOption = 18; // 3
			message ReqOption { // 3 // Device.DHCPv4.Client.{i}.ReqOption.{i}.
				optional string Enable = 1;
				optional string Order = 2;
				optional string Alias = 3;
				optional string Tag = 4;
				optional string Value = 5;
			} // 3 // Device.DHCPv4.Client.{i}.ReqOption.{i}.
			repeated ReqOption reqOption = 19; // 3
		} // 2 // Device.DHCPv4.Client.{i}.
		repeated Client client = 3; // 2
		message Server { // 2 // Device.DHCPv4.Server.
			optional string Enable = 1;
			optional string PoolNumberOfEntries = 2;
			message Pool { // 3 // Device.DHCPv4.Server.Pool.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string Alias = 3;
				optional string Order = 4;
				optional string Interface = 5;
				optional string VendorClassID = 6;
				optional string VendorClassIDExclude = 7;
				optional string VendorClassIDMode = 8;
				optional string ClientID = 9;
				optional string ClientIDExclude = 10;
				optional string UserClassID = 11;
				optional string UserClassIDExclude = 12;
				optional string Chaddr = 13;
				optional string ChaddrMask = 14;
				optional string ChaddrExclude = 15;
				optional string MinAddress = 16;
				optional string MaxAddress = 17;
				optional string ReservedAddresses = 18;
				optional string SubnetMask = 19;
				optional string DNSServers = 20;
				optional string DomainName = 21;
				optional string IPRouters = 22;
				optional string LeaseTime = 23;
				optional string StaticAddressNumberOfEntries = 24;
				optional string OptionNumberOfEntries = 25;
				optional string ClientNumberOfEntries = 26;
				message StaticAddress { // 4 // Device.DHCPv4.Server.Pool.{i}.StaticAddress.{i}.
					optional string Enable = 1;
					optional string Alias = 2;
					optional string Chaddr = 3;
					optional string Yiaddr = 4;
				} // 4 // Device.DHCPv4.Server.Pool.{i}.StaticAddress.{i}.
				repeated StaticAddress staticAddress = 28; // 4
				message Option { // 4 // Device.DHCPv4.Server.Pool.{i}.Option.{i}.
					optional string Enable = 1;
					optional string Alias = 2;
					optional string Tag = 3;
					optional string Value = 4;
				} // 4 // Device.DHCPv4.Server.Pool.{i}.Option.{i}.
				repeated Option option = 29; // 4
				message Client { // 4 // Device.DHCPv4.Server.Pool.{i}.Client.{i}.
					optional string Alias = 1;
					optional string Chaddr = 2;
					optional string Active = 3;
					optional string IPv4AddressNumberOfEntries = 4;
					optional string OptionNumberOfEntries = 5;
					message IPv4Address { // 5 // Device.DHCPv4.Server.Pool.{i}.Client.{i}.IPv4Address.{i}.
						optional string IPAddress = 1;
						optional string LeaseTimeRemaining = 2;
					} // 5 // Device.DHCPv4.Server.Pool.{i}.Client.{i}.IPv4Address.{i}.
					repeated IPv4Address iPv4Address = 7; // 5
					message Option { // 5 // Device.DHCPv4.Server.Pool.{i}.Client.{i}.Option.{i}.
						optional string Tag = 1;
						optional string Value = 2;
					} // 5 // Device.DHCPv4.Server.Pool.{i}.Client.{i}.Option.{i}.
					repeated Option option = 8; // 5
				} // 4 // Device.DHCPv4.Server.Pool.{i}.Client.{i}.
				repeated Client client = 30; // 4
			} // 3 // Device.DHCPv4.Server.Pool.{i}.
			repeated Pool pool = 4; // 3
		} // 2 // Device.DHCPv4.Server.
		optional Server server = 4; // 2
		message Relay { // 2 // Device.DHCPv4.Relay.
			optional string Enable = 1;
			optional string Status = 2;
			optional string ForwardingNumberOfEntries = 3;
			message Forwarding { // 3 // Device.DHCPv4.Relay.Forwarding.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string Alias = 3;
				optional string Order = 4;
				optional string Interface = 5;
				optional string VendorClassID = 6;
				optional string VendorClassIDExclude = 7;
				optional string VendorClassIDMode = 8;
				optional string ClientID = 9;
				optional string ClientIDExclude = 10;
				optional string UserClassID = 11;
				optional string UserClassIDExclude = 12;
				optional string Chaddr = 13;
				optional string ChaddrMask = 14;
				optional string ChaddrExclude = 15;
				optional string LocallyServed = 16;
				optional string DHCPServerIPAddress = 17;
			} // 3 // Device.DHCPv4.Relay.Forwarding.{i}.
			repeated Forwarding forwarding = 5; // 3
		} // 2 // Device.DHCPv4.Relay.
		optional Relay relay = 5; // 2
	} // 1 // Device.DHCPv4.
	optional DHCPv4 dHCPv4 = 44; // 1
	message DHCPv6 { // 1 // Device.DHCPv6.
		optional string ClientNumberOfEntries = 1;
		message Client { // 2 // Device.DHCPv6.Client.{i}.
			optional string Enable = 1;
			optional string Alias = 2;
			optional string Interface = 3;
			optional string Status = 4;
			optional string DUID = 5;
			optional string RequestAddresses = 6;
			optional string RequestPrefixes = 7;
			optional string RapidCommit = 8;
			optional string Renew = 9;
			optional string SuggestedT1 = 10;
			optional string SuggestedT2 = 11;
			optional string SupportedOptions = 12;
			optional string RequestedOptions = 13;
			optional string ServerNumberOfEntries = 14;
			optional string SentOptionNumberOfEntries = 15;
			optional string ReceivedOptionNumberOfEntries = 16;
			message Server { // 3 // Device.DHCPv6.Client.{i}.Server.{i}.
				optional string SourceAddress = 1;
				optional string DUID = 2;
				optional string InformationRefreshTime = 3;
			} // 3 // Device.DHCPv6.Client.{i}.Server.{i}.
			repeated Server server = 18; // 3
			message SentOption { // 3 // Device.DHCPv6.Client.{i}.SentOption.{i}.
				optional string Enable = 1;
				optional string Alias = 2;
				optional string Tag = 3;
				optional string Value = 4;
			} // 3 // Device.DHCPv6.Client.{i}.SentOption.{i}.
			repeated SentOption sentOption = 19; // 3
			message ReceivedOption { // 3 // Device.DHCPv6.Client.{i}.ReceivedOption.{i}.
				optional string Tag = 1;
				optional string Value = 2;
				optional string Server = 3;
			} // 3 // Device.DHCPv6.Client.{i}.ReceivedOption.{i}.
			repeated ReceivedOption receivedOption = 20; // 3
		} // 2 // Device.DHCPv6.Client.{i}.
		repeated Client client = 3; // 2
		message Server { // 2 // Device.DHCPv6.Server.
			optional string Enable = 1;
			optional string PoolNumberOfEntries = 2;
			message Pool { // 3 // Device.DHCPv6.Server.Pool.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string Alias = 3;
				optional string Order = 4;
				optional string Interface = 5;
				optional string DUID = 6;
				optional string DUIDExclude = 7;
				optional string VendorClassID = 8;
				optional string VendorClassIDExclude = 9;
				optional string UserClassID = 10;
				optional string UserClassIDExclude = 11;
				optional string SourceAddress = 12;
				optional string SourceAddressMask = 13;
				optional string SourceAddressExclude = 14;
				optional string IANAEnable = 15;
				optional string IANAManualPrefixes = 16;
				optional string IANAPrefixes = 17;
				optional string IAPDEnable = 18;
				optional string IAPDManualPrefixes = 19;
				optional string IAPDPrefixes = 20;
				optional string IAPDAddLength = 21;
				optional string ClientNumberOfEntries = 22;
				optional string OptionNumberOfEntries = 23;
				message Client { // 4 // Device.DHCPv6.Server.Pool.{i}.Client.{i}.
					optional string Alias = 1;
					optional string SourceAddress = 2;
					optional string Active = 3;
					optional string IPv6AddressNumberOfEntries = 4;
					optional string IPv6PrefixNumberOfEntries = 5;
					optional string OptionNumberOfEntries = 6;
					message IPv6Address { // 5 // Device.DHCPv6.Server.Pool.{i}.Client.{i}.IPv6Address.{i}.
						optional string IPAddress = 1;
						optional string PreferredLifetime = 2;
						optional string ValidLifetime = 3;
					} // 5 // Device.DHCPv6.Server.Pool.{i}.Client.{i}.IPv6Address.{i}.
					repeated IPv6Address iPv6Address = 8; // 5
					message IPv6Prefix { // 5 // Device.DHCPv6.Server.Pool.{i}.Client.{i}.IPv6Prefix.{i}.
						optional string Prefix = 1;
						optional string PreferredLifetime = 2;
						optional string ValidLifetime = 3;
					} // 5 // Device.DHCPv6.Server.Pool.{i}.Client.{i}.IPv6Prefix.{i}.
					repeated IPv6Prefix iPv6Prefix = 9; // 5
					message Option { // 5 // Device.DHCPv6.Server.Pool.{i}.Client.{i}.Option.{i}.
						optional string Tag = 1;
						optional string Value = 2;
					} // 5 // Device.DHCPv6.Server.Pool.{i}.Client.{i}.Option.{i}.
					repeated Option option = 10; // 5
				} // 4 // Device.DHCPv6.Server.Pool.{i}.Client.{i}.
				repeated Client client = 25; // 4
				message Option { // 4 // Device.DHCPv6.Server.Pool.{i}.Option.{i}.
					optional string Enable = 1;
					optional string Alias = 2;
					optional string Tag = 3;
					optional string Value = 4;
					optional string PassthroughClient = 5;
				} // 4 // Device.DHCPv6.Server.Pool.{i}.Option.{i}.
				repeated Option option = 26; // 4
			} // 3 // Device.DHCPv6.Server.Pool.{i}.
			repeated Pool pool = 4; // 3
		} // 2 // Device.DHCPv6.Server.
		optional Server server = 4; // 2
	} // 1 // Device.DHCPv6.
	optional DHCPv6 dHCPv6 = 45; // 1
	message IEEE8021x { // 1 // Device.IEEE8021x.
		optional string SupplicantNumberOfEntries = 1;
		message Supplicant { // 2 // Device.IEEE8021x.Supplicant.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string Interface = 4;
			optional string PAEState = 5;
			optional string EAPIdentity = 6;
			optional string MaxStart = 7;
			optional string StartPeriod = 8;
			optional string HeldPeriod = 9;
			optional string AuthPeriod = 10;
			optional string AuthenticationCapabilities = 11;
			optional string StartFailurePolicy = 12;
			optional string AuthenticationSuccessPolicy = 13;
			optional string Reset = 14;
			optional string Disconnect = 15;
			message Stats { // 3 // Device.IEEE8021x.Supplicant.{i}.Stats.
				optional string ReceivedFrames = 1;
				optional string TransmittedFrames = 2;
				optional string TransmittedStartFrames = 3;
				optional string TransmittedLogoffFrames = 4;
				optional string TransmittedResponseIdFrames = 5;
				optional string TransmittedResponseFrames = 6;
				optional string ReceivedRequestIdFrames = 7;
				optional string ReceivedRequestFrames = 8;
				optional string ReceivedInvalidFrames = 9;
				optional string ReceivedLengthErrorFrames = 10;
				optional string LastFrameVersion = 11;
				optional string LastFrameSourceMACAddress = 12;
			} // 3 // Device.IEEE8021x.Supplicant.{i}.Stats.
			optional Stats stats = 17; // 3
			message EAPMD5 { // 3 // Device.IEEE8021x.Supplicant.{i}.EAPMD5.
				optional string Enable = 1;
				optional string SharedSecret = 2;
			} // 3 // Device.IEEE8021x.Supplicant.{i}.EAPMD5.
			optional EAPMD5 eAPMD5 = 18; // 3
			message EAPTLS { // 3 // Device.IEEE8021x.Supplicant.{i}.EAPTLS.
				optional string Enable = 1;
				optional string MutualAuthenticationEnable = 2;
			} // 3 // Device.IEEE8021x.Supplicant.{i}.EAPTLS.
			optional EAPTLS eAPTLS = 19; // 3
		} // 2 // Device.IEEE8021x.Supplicant.{i}.
		repeated Supplicant supplicant = 3; // 2
	} // 1 // Device.IEEE8021x.
	optional IEEE8021x iEEE8021x = 46; // 1
	message Users { // 1 // Device.Users.
		optional string UserNumberOfEntries = 1;
		message User { // 2 // Device.Users.User.{i}.
			optional string Alias = 1;
			optional string Enable = 2;
			optional string RemoteAccessCapable = 3;
			optional string Username = 4;
			optional string Password = 5;
			optional string Language = 6;
		} // 2 // Device.Users.User.{i}.
		repeated User user = 3; // 2
	} // 1 // Device.Users.
	optional Users users = 47; // 1
	message SmartCardReaders { // 1 // Device.SmartCardReaders.
		optional string SmartCardReaderNumberOfEntries = 1;
		message SmartCardReader { // 2 // Device.SmartCardReaders.SmartCardReader.{i}.
			optional string Alias = 1;
			optional string Enable = 2;
			optional string Status = 3;
			optional string Name = 4;
			optional string Reset = 5;
			optional string ResetTime = 6;
			optional string DecryptionFailedCounter = 7;
			optional string DecryptionFailedNoKeyCounter = 8;
			message SmartCard { // 3 // Device.SmartCardReaders.SmartCardReader.{i}.SmartCard.
				optional string Status = 1;
				optional string Type = 2;
				optional string Application = 3;
				optional string SerialNumber = 4;
				optional string ATR = 5;
			} // 3 // Device.SmartCardReaders.SmartCardReader.{i}.SmartCard.
			optional SmartCard smartCard = 10; // 3
		} // 2 // Device.SmartCardReaders.SmartCardReader.{i}.
		repeated SmartCardReader smartCardReader = 3; // 2
	} // 1 // Device.SmartCardReaders.
	optional SmartCardReaders smartCardReaders = 48; // 1
	message UPnP { // 1 // Device.UPnP.
		message Device { // 2 // Device.UPnP.Device.
			optional string Enable = 1;
			optional string UPnPMediaServer = 2;
			optional string UPnPMediaRenderer = 3;
			optional string UPnPWLANAccessPoint = 4;
			optional string UPnPQoSDevice  = 5;
			optional string UPnPQoSPolicyHolder = 6;
			optional string UPnPIGD = 7;
			optional string UPnPDMBasicMgmt = 8;
			optional string UPnPDMConfigurationMgmt = 9;
			optional string UPnPDMSoftwareMgmt = 10;
			message Capabilities { // 3 // Device.UPnP.Device.Capabilities.
				optional string UPnPArchitecture = 1;
				optional string UPnPArchitectureMinorVer = 2;
				optional string UPnPMediaServer = 3;
				optional string UPnPMediaRenderer = 4;
				optional string UPnPWLANAccessPoint = 5;
				optional string UPnPBasicDevice = 6;
				optional string UPnPQoSDevice = 7;
				optional string UPnPQoSPolicyHolder = 8;
				optional string UPnPIGD = 9;
				optional string UPnPDMBasicMgmt = 10;
				optional string UPnPDMConfigurationMgmt = 11;
				optional string UPnPDMSoftwareMgmt = 12;
			} // 3 // Device.UPnP.Device.Capabilities.
			optional Capabilities capabilities = 12; // 3
		} // 2 // Device.UPnP.Device.
		optional Device device = 2; // 2
		message Discovery { // 2 // Device.UPnP.Discovery.
			optional string RootDeviceNumberOfEntries = 1;
			optional string DeviceNumberOfEntries = 2;
			optional string ServiceNumberOfEntries = 3;
			message RootDevice { // 3 // Device.UPnP.Discovery.RootDevice.{i}.
				optional string Status = 1;
				optional string UUID = 2;
				optional string USN = 3;
				optional string LeaseTime = 4;
				optional string Location = 5;
				optional string Server = 6;
				optional string Host = 7;
				optional string LastUpdate = 8;
			} // 3 // Device.UPnP.Discovery.RootDevice.{i}.
			repeated RootDevice rootDevice = 5; // 3
			message Device { // 3 // Device.UPnP.Discovery.Device.{i}.
				optional string Status = 1;
				optional string UUID = 2;
				optional string USN = 3;
				optional string LeaseTime = 4;
				optional string Location = 5;
				optional string Server = 6;
				optional string Host = 7;
				optional string LastUpdate = 8;
			} // 3 // Device.UPnP.Discovery.Device.{i}.
			repeated Device device = 6; // 3
			message Service { // 3 // Device.UPnP.Discovery.Service.{i}.
				optional string Status = 1;
				optional string USN = 2;
				optional string LeaseTime = 3;
				optional string Location = 4;
				optional string Server = 5;
				optional string Host = 6;
				optional string LastUpdate = 7;
				optional string ParentDevice = 8;
			} // 3 // Device.UPnP.Discovery.Service.{i}.
			repeated Service service = 7; // 3
		} // 2 // Device.UPnP.Discovery.
		optional Discovery discovery = 3; // 2
		message Description { // 2 // Device.UPnP.Description.
			optional string DeviceDescriptionNumberOfEntries = 1;
			optional string DeviceInstanceNumberOfEntries = 2;
			optional string ServiceInstanceNumberOfEntries = 3;
			message DeviceDescription { // 3 // Device.UPnP.Description.DeviceDescription.{i}.
				optional string URLBase = 1;
				optional string SpecVersion = 2;
				optional string Host = 3;
			} // 3 // Device.UPnP.Description.DeviceDescription.{i}.
			repeated DeviceDescription deviceDescription = 5; // 3
			message DeviceInstance { // 3 // Device.UPnP.Description.DeviceInstance.{i}.
				optional string UDN = 1;
				optional string ParentDevice = 2;
				optional string DiscoveryDevice = 3;
				optional string DeviceType = 4;
				optional string FriendlyName = 5;
				optional string DeviceCategory = 6;
				optional string Manufacturer = 7;
				optional string ManufacturerOUI = 8;
				optional string ManufacturerURL = 9;
				optional string ModelDescription = 10;
				optional string ModelName = 11;
				optional string ModelNumber = 12;
				optional string ModelURL = 13;
				optional string SerialNumber = 14;
				optional string UPC = 15;
				optional string PresentationURL = 16;
			} // 3 // Device.UPnP.Description.DeviceInstance.{i}.
			repeated DeviceInstance deviceInstance = 6; // 3
			message ServiceInstance { // 3 // Device.UPnP.Description.ServiceInstance.{i}.
				optional string ParentDevice = 1;
				optional string ServiceId = 2;
				optional string ServiceDiscovery = 3;
				optional string ServiceType = 4;
				optional string SCPDURL = 5;
				optional string ControlURL = 6;
				optional string EventSubURL = 7;
			} // 3 // Device.UPnP.Description.ServiceInstance.{i}.
			repeated ServiceInstance serviceInstance = 7; // 3
		} // 2 // Device.UPnP.Description.
		optional Description description = 4; // 2
	} // 1 // Device.UPnP.
	optional UPnP uPnP = 49; // 1
	message ETSIM2M { // 1 // Device.ETSIM2M.
		optional string SCLNumberOfEntries = 1;
		message SCL { // 2 // Device.ETSIM2M.SCL.{i}.
			optional string Enable = 1;
			optional string Alias = 2;
			optional string AnnouncedToSCLList = 3;
			optional string SAFPolicySetNumberOfEntries = 4;
			optional string AreaNwkInstanceNumberOfEntries = 5;
			optional string AreaNwkDeviceInfoInstanceNumberOfEntries = 6;
			message Discovery { // 3 // Device.ETSIM2M.SCL.{i}.Discovery.
				optional string MaxNumberOfDiscovRecords = 1;
				optional string MaxSizeOfDiscovAnswer = 2;
			} // 3 // Device.ETSIM2M.SCL.{i}.Discovery.
			optional Discovery discovery = 8; // 3
			message Reregistration { // 3 // Device.ETSIM2M.SCL.{i}.Reregistration.
				optional string RegTargetNSCLList = 1;
				optional string RegSearchStrings = 2;
				optional string RegAccessRightID = 3;
				optional string RegExpirationDuration = 4;
				optional string Reregistration = 5;
				message ActionStatus { // 4 // Device.ETSIM2M.SCL.{i}.Reregistration.ActionStatus.
					optional string Progress = 1;
					optional string FinalStatus = 2;
				} // 4 // Device.ETSIM2M.SCL.{i}.Reregistration.ActionStatus.
				optional ActionStatus actionStatus = 7; // 4
			} // 3 // Device.ETSIM2M.SCL.{i}.Reregistration.
			optional Reregistration reregistration = 9; // 3
			message SAFPolicySet { // 3 // Device.ETSIM2M.SCL.{i}.SAFPolicySet.{i}.
				optional string Enable = 1;
				optional string Alias = 2;
				optional string PolicyScope = 3;
				optional string ANPPolicyNumberOfEntries = 4;
				message ANPPolicy { // 4 // Device.ETSIM2M.SCL.{i}.SAFPolicySet.{i}.ANPPolicy.{i}.
					optional string Enable = 1;
					optional string Alias = 2;
					optional string ANName = 3;
					optional string BlockPeriodNumberOfEntries = 4;
					optional string RequestCategoryNumberOfEntries = 5;
					message BlockPeriod { // 5 // Device.ETSIM2M.SCL.{i}.SAFPolicySet.{i}.ANPPolicy.{i}.BlockPeriod.{i}.
						optional string Enable = 1;
						optional string Alias = 2;
						optional string FailedAttempts = 3;
						optional string BlockDuration = 4;
					} // 5 // Device.ETSIM2M.SCL.{i}.SAFPolicySet.{i}.ANPPolicy.{i}.BlockPeriod.{i}.
					repeated BlockPeriod blockPeriod = 7; // 5
					message RequestCategory { // 5 // Device.ETSIM2M.SCL.{i}.SAFPolicySet.{i}.ANPPolicy.{i}.RequestCategory.{i}.
						optional string Enable = 1;
						optional string Alias = 2;
						optional string RCAT = 3;
						optional string ScheduleNumberOfEntries = 4;
						message Schedule { // 6 // Device.ETSIM2M.SCL.{i}.SAFPolicySet.{i}.ANPPolicy.{i}.RequestCategory.{i}.Schedule.{i}.
							optional string Enable = 1;
							optional string Alias = 2;
							optional string Schedules = 3;
							optional string AbsTimeSpanNumberOfEntries = 4;
							message AbsTimeSpan { // 7 // Device.ETSIM2M.SCL.{i}.SAFPolicySet.{i}.ANPPolicy.{i}.RequestCategory.{i}.Schedule.{i}.AbsTimeSpan.{i}.
								optional string Enable = 1;
								optional string Alias = 2;
								optional string StartTime = 3;
								optional string EndTime = 4;
							} // 7 // Device.ETSIM2M.SCL.{i}.SAFPolicySet.{i}.ANPPolicy.{i}.RequestCategory.{i}.Schedule.{i}.AbsTimeSpan.{i}.
							repeated AbsTimeSpan absTimeSpan = 6; // 7
						} // 6 // Device.ETSIM2M.SCL.{i}.SAFPolicySet.{i}.ANPPolicy.{i}.RequestCategory.{i}.Schedule.{i}.
						repeated Schedule schedule = 6; // 6
					} // 5 // Device.ETSIM2M.SCL.{i}.SAFPolicySet.{i}.ANPPolicy.{i}.RequestCategory.{i}.
					repeated RequestCategory requestCategory = 8; // 5
				} // 4 // Device.ETSIM2M.SCL.{i}.SAFPolicySet.{i}.ANPPolicy.{i}.
				repeated ANPPolicy aNPPolicy = 6; // 4
				message M2MSPPolicy { // 4 // Device.ETSIM2M.SCL.{i}.SAFPolicySet.{i}.M2MSPPolicy.
					optional string DefaultRCATValue = 1;
					optional string RequestCategoryNumberOfEntries = 2;
					message RequestCategory { // 5 // Device.ETSIM2M.SCL.{i}.SAFPolicySet.{i}.M2MSPPolicy.RequestCategory.{i}.
						optional string Enable = 1;
						optional string Alias = 2;
						optional string RCAT = 3;
						optional string TolerableDelay = 4;
						optional string Thresh = 5;
						optional string Mem = 6;
						optional string RankedANList = 7;
					} // 5 // Device.ETSIM2M.SCL.{i}.SAFPolicySet.{i}.M2MSPPolicy.RequestCategory.{i}.
					repeated RequestCategory requestCategory = 4; // 5
				} // 4 // Device.ETSIM2M.SCL.{i}.SAFPolicySet.{i}.M2MSPPolicy.
				optional M2MSPPolicy m2MSPPolicy = 7; // 4
			} // 3 // Device.ETSIM2M.SCL.{i}.SAFPolicySet.{i}.
			repeated SAFPolicySet sAFPolicySet = 10; // 3
			message AreaNwkInstance { // 3 // Device.ETSIM2M.SCL.{i}.AreaNwkInstance.{i}.
				optional string ID = 1;
				optional string AreaNwkType = 2;
				optional string ListOfDevices = 3;
				optional string PropertyNumberOfEntries = 4;
				message Property { // 4 // Device.ETSIM2M.SCL.{i}.AreaNwkInstance.{i}.Property.{i}.
					optional string Name = 1;
					optional string Value = 2;
				} // 4 // Device.ETSIM2M.SCL.{i}.AreaNwkInstance.{i}.Property.{i}.
				repeated Property property = 6; // 4
			} // 3 // Device.ETSIM2M.SCL.{i}.AreaNwkInstance.{i}.
			repeated AreaNwkInstance areaNwkInstance = 11; // 3
			message AreaNwkDeviceInfoInstance { // 3 // Device.ETSIM2M.SCL.{i}.AreaNwkDeviceInfoInstance.{i}.
				optional string AreaNwkInstance = 1;
				optional string Host = 2;
				optional string ListOfDeviceNeighbors = 3;
				optional string ListOfDeviceApplications = 4;
				optional string SleepInterval = 5;
				optional string SleepDuration = 6;
				optional string Status = 7;
				optional string Active = 8;
				optional string PropertyNumberOfEntries = 9;
				message Property { // 4 // Device.ETSIM2M.SCL.{i}.AreaNwkDeviceInfoInstance.{i}.Property.{i}.
					optional string Name = 1;
					optional string Value = 2;
				} // 4 // Device.ETSIM2M.SCL.{i}.AreaNwkDeviceInfoInstance.{i}.Property.{i}.
				repeated Property property = 11; // 4
			} // 3 // Device.ETSIM2M.SCL.{i}.AreaNwkDeviceInfoInstance.{i}.
			repeated AreaNwkDeviceInfoInstance areaNwkDeviceInfoInstance = 12; // 3
		} // 2 // Device.ETSIM2M.SCL.{i}.
		repeated SCL sCL = 3; // 2
	} // 1 // Device.ETSIM2M.
	optional ETSIM2M eTSIM2M = 50; // 1
	message DLNA { // 1 // Device.DLNA.
		message Capabilities { // 2 // Device.DLNA.Capabilities.
			optional string HNDDeviceClass = 1;
			optional string DeviceCapability = 2;
			optional string HIDDeviceClass = 3;
			optional string ImageClassProfileID = 4;
			optional string AudioClassProfileID = 5;
			optional string AVClassProfileID = 6;
			optional string MediaCollectionProfileID = 7;
			optional string PrinterClassProfileID = 8;
		} // 2 // Device.DLNA.Capabilities.
		optional Capabilities capabilities = 2; // 2
	} // 1 // Device.DLNA.
	optional DLNA dLNA = 51; // 1
	message SelfTestDiagnostics { // 1 // Device.SelfTestDiagnostics.
		optional string DiagnosticsState = 1;
		optional string Results = 2;
	} // 1 // Device.SelfTestDiagnostics.
	optional SelfTestDiagnostics selfTestDiagnostics = 52; // 1
	message Firewall { // 1 // Device.Firewall.
		optional string Enable = 1;
		optional string Config = 2;
		optional string AdvancedLevel = 3;
		optional string Type = 4;
		optional string Version = 5;
		optional string LastChange = 6;
		optional string LevelNumberOfEntries = 7;
		optional string ChainNumberOfEntries = 8;
		message Level { // 2 // Device.Firewall.Level.{i}.
			optional string Alias = 1;
			optional string Name = 2;
			optional string Description = 3;
			optional string Order = 4;
			optional string Chain = 5;
			optional string PortMappingEnabled = 6;
			optional string DefaultPolicy = 7;
			optional string DefaultLogPolicy = 8;
		} // 2 // Device.Firewall.Level.{i}.
		repeated Level level = 10; // 2
		message Chain { // 2 // Device.Firewall.Chain.{i}.
			optional string Enable = 1;
			optional string Alias = 2;
			optional string Name = 3;
			optional string Creator = 4;
			optional string RuleNumberOfEntries = 5;
			message Rule { // 3 // Device.Firewall.Chain.{i}.Rule.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string Order = 3;
				optional string Alias = 4;
				optional string Description = 5;
				optional string Target = 6;
				optional string TargetChain = 7;
				optional string Log = 8;
				optional string CreationDate = 9;
				optional string ExpiryDate = 10;
				optional string SourceInterface = 11;
				optional string SourceInterfaceExclude = 12;
				optional string SourceAllInterfaces = 13;
				optional string DestInterface = 14;
				optional string DestInterfaceExclude = 15;
				optional string DestAllInterfaces = 16;
				optional string IPVersion = 17;
				optional string DestIP = 18;
				optional string DestMask = 19;
				optional string DestIPExclude = 20;
				optional string SourceIP = 21;
				optional string SourceMask = 22;
				optional string SourceIPExclude = 23;
				optional string Protocol = 24;
				optional string ProtocolExclude = 25;
				optional string DestPort = 26;
				optional string DestPortRangeMax = 27;
				optional string DestPortExclude = 28;
				optional string SourcePort = 29;
				optional string SourcePortRangeMax = 30;
				optional string SourcePortExclude = 31;
				optional string DSCP = 32;
				optional string DSCPExclude = 33;
			} // 3 // Device.Firewall.Chain.{i}.Rule.{i}.
			repeated Rule rule = 7; // 3
		} // 2 // Device.Firewall.Chain.{i}.
		repeated Chain chain = 11; // 2
	} // 1 // Device.Firewall.
	optional Firewall firewall = 53; // 1
	message PeriodicStatistics { // 1 // Device.PeriodicStatistics.
		optional string MinSampleInterval = 1;
		optional string MaxReportSamples = 2;
		optional string SampleSetNumberOfEntries = 3;
		message SampleSet { // 2 // Device.PeriodicStatistics.SampleSet.{i}.
			optional string Alias = 1;
			optional string Enable = 2;
			optional string Status = 3;
			optional string Name = 4;
			optional string SampleInterval = 5;
			optional string ReportSamples = 6;
			optional string TimeReference = 7;
			optional string FetchSamples = 8;
			optional string ForceSample = 9;
			optional string ReportStartTime = 10;
			optional string ReportEndTime = 11;
			optional string SampleSeconds = 12;
			optional string ParameterNumberOfEntries = 13;
			message Parameter { // 3 // Device.PeriodicStatistics.SampleSet.{i}.Parameter.{i}.
				optional string Alias = 1;
				optional string Enable = 2;
				optional string Reference = 3;
				optional string SampleMode = 4;
				optional string CalculationMode = 5;
				optional string LowThreshold = 6;
				optional string HighThreshold = 7;
				optional string SampleSeconds = 8;
				optional string SuspectData = 9;
				optional string Values = 10;
				optional string Failures = 11;
			} // 3 // Device.PeriodicStatistics.SampleSet.{i}.Parameter.{i}.
			repeated Parameter parameter = 15; // 3
		} // 2 // Device.PeriodicStatistics.SampleSet.{i}.
		repeated SampleSet sampleSet = 5; // 2
	} // 1 // Device.PeriodicStatistics.
	optional PeriodicStatistics periodicStatistics = 54; // 1
	message SoftwareModules { // 1 // Device.SoftwareModules.
		optional string ExecEnvNumberOfEntries = 1;
		optional string DeploymentUnitNumberOfEntries = 2;
		optional string ExecutionUnitNumberOfEntries = 3;
		message ExecEnv { // 2 // Device.SoftwareModules.ExecEnv.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Reset = 3;
			optional string Alias = 4;
			optional string Name = 5;
			optional string Type = 6;
			optional string InitialRunLevel = 7;
			optional string RequestedRunLevel = 8;
			optional string CurrentRunLevel = 9;
			optional string InitialExecutionUnitRunLevel = 10;
			optional string Vendor = 11;
			optional string Version = 12;
			optional string ParentExecEnv = 13;
			optional string AllocatedDiskSpace = 14;
			optional string AvailableDiskSpace = 15;
			optional string AllocatedMemory = 16;
			optional string AvailableMemory = 17;
			optional string ActiveExecutionUnits = 18;
			optional string ProcessorRefList = 19;
		} // 2 // Device.SoftwareModules.ExecEnv.{i}.
		repeated ExecEnv execEnv = 5; // 2
		message DeploymentUnit { // 2 // Device.SoftwareModules.DeploymentUnit.{i}.
			optional string UUID = 1;
			optional string DUID = 2;
			optional string Alias = 3;
			optional string Name = 4;
			optional string Status = 5;
			optional string Resolved = 6;
			optional string URL = 7;
			optional string Description = 8;
			optional string Vendor = 9;
			optional string Version = 10;
			optional string VendorLogList = 11;
			optional string VendorConfigList = 12;
			optional string ExecutionUnitList = 13;
			optional string ExecutionEnvRef = 14;
		} // 2 // Device.SoftwareModules.DeploymentUnit.{i}.
		repeated DeploymentUnit deploymentUnit = 6; // 2
		message ExecutionUnit { // 2 // Device.SoftwareModules.ExecutionUnit.{i}.
			optional string EUID = 1;
			optional string Alias = 2;
			optional string Name = 3;
			optional string ExecEnvLabel = 4;
			optional string Status = 5;
			optional string RequestedState = 6;
			optional string ExecutionFaultCode = 7;
			optional string ExecutionFaultMessage = 8;
			optional string AutoStart = 9;
			optional string RunLevel = 10;
			optional string Vendor = 11;
			optional string Version = 12;
			optional string Description = 13;
			optional string DiskSpaceInUse = 14;
			optional string MemoryInUse = 15;
			optional string References = 16;
			optional string AssociatedProcessList = 17;
			optional string VendorLogList = 18;
			optional string VendorConfigList = 19;
			optional string SupportedDataModelList = 20;
			optional string ExecutionEnvRef = 21;
			message Extensions { // 3 // Device.SoftwareModules.ExecutionUnit.{i}.Extensions.
			} // 3 // Device.SoftwareModules.ExecutionUnit.{i}.Extensions.
			optional Extensions extensions = 23; // 3
		} // 2 // Device.SoftwareModules.ExecutionUnit.{i}.
		repeated ExecutionUnit executionUnit = 7; // 2
	} // 1 // Device.SoftwareModules.
	optional SoftwareModules softwareModules = 55; // 1
	message FaultMgmt { // 1 // Device.FaultMgmt.
		optional string SupportedAlarmNumberOfEntries = 1;
		optional string MaxCurrentAlarmEntries = 2;
		optional string CurrentAlarmNumberOfEntries = 3;
		optional string HistoryEventNumberOfEntries = 4;
		optional string ExpeditedEventNumberOfEntries = 5;
		optional string QueuedEventNumberOfEntries = 6;
		message SupportedAlarm { // 2 // Device.FaultMgmt.SupportedAlarm.{i}.
			optional string EventType = 1;
			optional string ProbableCause = 2;
			optional string SpecificProblem = 3;
			optional string PerceivedSeverity = 4;
			optional string ReportingMechanism = 5;
		} // 2 // Device.FaultMgmt.SupportedAlarm.{i}.
		repeated SupportedAlarm supportedAlarm = 8; // 2
		message CurrentAlarm { // 2 // Device.FaultMgmt.CurrentAlarm.{i}.
			optional string AlarmIdentifier = 1;
			optional string AlarmRaisedTime = 2;
			optional string AlarmChangedTime = 3;
			optional string ManagedObjectInstance = 4;
			optional string EventType = 5;
			optional string ProbableCause = 6;
			optional string SpecificProblem = 7;
			optional string PerceivedSeverity = 8;
			optional string AdditionalText = 9;
			optional string AdditionalInformation = 10;
		} // 2 // Device.FaultMgmt.CurrentAlarm.{i}.
		repeated CurrentAlarm currentAlarm = 9; // 2
		message HistoryEvent { // 2 // Device.FaultMgmt.HistoryEvent.{i}.
			optional string EventTime = 1;
			optional string AlarmIdentifier = 2;
			optional string NotificationType = 3;
			optional string ManagedObjectInstance = 4;
			optional string EventType = 5;
			optional string ProbableCause = 6;
			optional string SpecificProblem = 7;
			optional string PerceivedSeverity = 8;
			optional string AdditionalText = 9;
			optional string AdditionalInformation = 10;
		} // 2 // Device.FaultMgmt.HistoryEvent.{i}.
		repeated HistoryEvent historyEvent = 10; // 2
		message ExpeditedEvent { // 2 // Device.FaultMgmt.ExpeditedEvent.{i}.
			optional string EventTime = 1;
			optional string AlarmIdentifier = 2;
			optional string NotificationType = 3;
			optional string ManagedObjectInstance = 4;
			optional string EventType = 5;
			optional string ProbableCause = 6;
			optional string SpecificProblem = 7;
			optional string PerceivedSeverity = 8;
			optional string AdditionalText = 9;
			optional string AdditionalInformation = 10;
		} // 2 // Device.FaultMgmt.ExpeditedEvent.{i}.
		repeated ExpeditedEvent expeditedEvent = 11; // 2
		message QueuedEvent { // 2 // Device.FaultMgmt.QueuedEvent.{i}.
			optional string EventTime = 1;
			optional string AlarmIdentifier = 2;
			optional string NotificationType = 3;
			optional string ManagedObjectInstance = 4;
			optional string EventType = 5;
			optional string ProbableCause = 6;
			optional string SpecificProblem = 7;
			optional string PerceivedSeverity = 8;
			optional string AdditionalText = 9;
			optional string AdditionalInformation = 10;
		} // 2 // Device.FaultMgmt.QueuedEvent.{i}.
		repeated QueuedEvent queuedEvent = 12; // 2
	} // 1 // Device.FaultMgmt.
	optional FaultMgmt faultMgmt = 56; // 1
	message Security { // 1 // Device.Security.
		optional string CertificateNumberOfEntries = 1;
		message Certificate { // 2 // Device.Security.Certificate.{i}.
			optional string Enable = 1;
			optional string LastModif = 2;
			optional string SerialNumber = 3;
			optional string Issuer = 4;
			optional string NotBefore = 5;
			optional string NotAfter = 6;
			optional string Subject = 7;
			optional string SubjectAlt = 8;
			optional string SignatureAlgorithm = 9;
		} // 2 // Device.Security.Certificate.{i}.
		repeated Certificate certificate = 3; // 2
	} // 1 // Device.Security.
	optional Security security = 57; // 1
	message FAP { // 1 // Device.FAP.
		message GPS { // 2 // Device.FAP.GPS.
			optional string ScanOnBoot = 1;
			optional string ScanPeriodically = 2;
			optional string PeriodicInterval = 3;
			optional string PeriodicTime = 4;
			optional string ContinuousGPS = 5;
			optional string ScanTimeout = 6;
			optional string ScanStatus = 7;
			optional string ErrorDetails = 8;
			optional string LastScanTime = 9;
			optional string LastSuccessfulScanTime = 10;
			optional string LockedLatitude = 11;
			optional string LockedLongitude = 12;
			optional string NumberOfSatellites = 13;
			optional string GPSReset = 14;
			message ContinuousGPSStatus { // 3 // Device.FAP.GPS.ContinuousGPSStatus.
				optional string CurrentFix = 1;
				optional string GotFix = 2;
				optional string TimingGood = 3;
				optional string Latitude = 4;
				optional string Longitude = 5;
				optional string Elevation = 6;
				optional string LastFixTime = 7;
				optional string LastFixDuration = 8;
				optional string FirstFixTimeout = 9;
				optional string SatellitesTracked = 10;
				optional string SatelliteTrackingInterval = 11;
				optional string ReceiverStatus = 12;
				optional string LocationType = 13;
				optional string LockTimeOutDuration = 14;
			} // 3 // Device.FAP.GPS.ContinuousGPSStatus.
			optional ContinuousGPSStatus continuousGPSStatus = 16; // 3
			message AGPSServerConfig { // 3 // Device.FAP.GPS.AGPSServerConfig.
				optional string Enable = 1;
				optional string ServerURL = 2;
				optional string ServerPort = 3;
				optional string Username = 4;
				optional string Password = 5;
				optional string ReferenceLatitude = 6;
				optional string ReferenceLongitude = 7;
				optional string ServerInUse = 8;
			} // 3 // Device.FAP.GPS.AGPSServerConfig.
			optional AGPSServerConfig aGPSServerConfig = 17; // 3
		} // 2 // Device.FAP.GPS.
		optional GPS gPS = 2; // 2
		message PerfMgmt { // 2 // Device.FAP.PerfMgmt.
			optional string ConfigNumberOfEntries = 1;
			message Config { // 3 // Device.FAP.PerfMgmt.Config.{i}.
				optional string Enable = 1;
				optional string Alias = 2;
				optional string URL = 3;
				optional string Username = 4;
				optional string Password = 5;
				optional string PeriodicUploadInterval = 6;
				optional string PeriodicUploadTime = 7;
			} // 3 // Device.FAP.PerfMgmt.Config.{i}.
			repeated Config config = 3; // 3
		} // 2 // Device.FAP.PerfMgmt.
		optional PerfMgmt perfMgmt = 3; // 2
		message ApplicationPlatform { // 2 // Device.FAP.ApplicationPlatform.
			optional string Version = 1;
			optional string Enable = 2;
			optional string Status = 3;
			optional string MaxNumberOfApplications = 4;
			optional string CurrentNumberofApplications = 5;
			message Capabilities { // 3 // Device.FAP.ApplicationPlatform.Capabilities.
				optional string PresenceApplicationSupport = 1;
				optional string FemtoAwarenessAPISupport = 2;
				optional string SMSAPISupport = 3;
				optional string SubscribeToNotificationsOfSMSSentToApplicationSupport = 4;
				optional string QuerySMSDeliveryStatusSupport = 5;
				optional string MMSAPISupport = 6;
				optional string QueryMMSDeliveryStatusSupport = 7;
				optional string SubscribeToNotificationsOfMMSSentToApplicationSupport = 8;
				optional string TerminalLocationAPISupport = 9;
				optional string AuthenticationMethodsSupported = 10;
				optional string AccessLevelsSupported = 11;
				optional string SendSMSTargetAddressType = 12;
				optional string SendMMSTargetAddressType = 13;
			} // 3 // Device.FAP.ApplicationPlatform.Capabilities.
			optional Capabilities capabilities = 7; // 3
			message Control { // 3 // Device.FAP.ApplicationPlatform.Control.
				optional string AuthenticationMethod = 1;
				optional string TunnelInst = 2;
				message FemtoAwareness { // 4 // Device.FAP.ApplicationPlatform.Control.FemtoAwareness.
					optional string APIEnable = 1;
					optional string QueueEnable = 2;
					optional string Queueing  = 3;
					optional string MaxAPIUsersNumber = 4;
					optional string FemtozoneID = 5;
					optional string NotificationsUserIdentifierMSISDN = 6;
					optional string SubscribeToNotificationsResponseCallbackData = 7;
					optional string QueryFemtocellResponseTimezone = 8;
				} // 4 // Device.FAP.ApplicationPlatform.Control.FemtoAwareness.
				optional FemtoAwareness femtoAwareness = 4; // 4
				message SMS { // 4 // Device.FAP.ApplicationPlatform.Control.SMS.
					optional string APIEnable = 1;
					optional string QueueEnable = 2;
					optional string Queueing  = 3;
					optional string MaxAPIUsersNumber = 4;
					optional string MinSendSMSTimeInterval = 5;
					optional string EnableQuerySMSDeliveryStatus = 6;
					optional string EnableSubscribeToNotificationsOfMessageSentToApplication = 7;
				} // 4 // Device.FAP.ApplicationPlatform.Control.SMS.
				optional SMS sMS = 5; // 4
				message MMS { // 4 // Device.FAP.ApplicationPlatform.Control.MMS.
					optional string APIEnable = 1;
					optional string QueueEnable = 2;
					optional string Queueing  = 3;
					optional string MaxAPIUsersNumber = 4;
					optional string MinSendMMSTimeInterval = 5;
					optional string EnableQueryMMSDeliveryStatus = 6;
					optional string EnableSubscribeToNotificationsOfMessageSentToApplication = 7;
				} // 4 // Device.FAP.ApplicationPlatform.Control.MMS.
				optional MMS mMS = 6; // 4
				message TerminalLocation { // 4 // Device.FAP.ApplicationPlatform.Control.TerminalLocation.
					optional string APIEnable = 1;
					optional string QueueEnable = 2;
					optional string Queueing  = 3;
					optional string MaxAPIUsersNumber = 4;
					optional string QueryMobileLocationResponseAddress = 5;
					optional string QueryMobileLocationResponseLongitudeLatitude = 6;
					optional string QueryMobileLocationResponseAltitude = 7;
					optional string QueryMobileLocationResponseTimestamp = 8;
				} // 4 // Device.FAP.ApplicationPlatform.Control.TerminalLocation.
				optional TerminalLocation terminalLocation = 7; // 4
			} // 3 // Device.FAP.ApplicationPlatform.Control.
			optional Control control = 8; // 3
			message Monitoring { // 3 // Device.FAP.ApplicationPlatform.Monitoring.
				optional string Enable = 1;
				optional string MonitoringInterval = 2;
				optional string AuthenticationRequestsReceived = 3;
				optional string AuthenticationRequestsRejected = 4;
				message FemtoAwareness { // 4 // Device.FAP.ApplicationPlatform.Monitoring.FemtoAwareness.
					optional string APIAvailable = 1;
					optional string APIUsers = 2;
					optional string QueueState = 3;
					optional string QueueNum = 4;
					optional string QueueReceived = 5;
					optional string QueueDiscarded = 6;
				} // 4 // Device.FAP.ApplicationPlatform.Monitoring.FemtoAwareness.
				optional FemtoAwareness femtoAwareness = 6; // 4
				message SMS { // 4 // Device.FAP.ApplicationPlatform.Monitoring.SMS.
					optional string APIAvailable = 1;
					optional string APIUsers = 2;
					optional string QueueState = 3;
					optional string QueueNum = 4;
					optional string QueueReceived = 5;
					optional string QueueDiscarded = 6;
				} // 4 // Device.FAP.ApplicationPlatform.Monitoring.SMS.
				optional SMS sMS = 7; // 4
				message MMS { // 4 // Device.FAP.ApplicationPlatform.Monitoring.MMS.
					optional string APIAvailable = 1;
					optional string APIUsers = 2;
					optional string QueueState = 3;
					optional string QueueNum = 4;
					optional string QueueReceived = 5;
					optional string QueueDiscarded = 6;
				} // 4 // Device.FAP.ApplicationPlatform.Monitoring.MMS.
				optional MMS mMS = 8; // 4
				message TerminalLocation { // 4 // Device.FAP.ApplicationPlatform.Monitoring.TerminalLocation.
					optional string APIAvailable = 1;
					optional string APIUsers = 2;
					optional string QueueState = 3;
					optional string QueueNum = 4;
					optional string QueueReceived = 5;
					optional string QueueDiscarded = 6;
				} // 4 // Device.FAP.ApplicationPlatform.Monitoring.TerminalLocation.
				optional TerminalLocation terminalLocation = 9; // 4
			} // 3 // Device.FAP.ApplicationPlatform.Monitoring.
			optional Monitoring monitoring = 9; // 3
		} // 2 // Device.FAP.ApplicationPlatform.
		optional ApplicationPlatform applicationPlatform = 4; // 2
	} // 1 // Device.FAP.
	optional FAP fAP = 58; // 1
	message BulkData { // 1 // Device.BulkData.
		optional string Enable = 1;
		optional string Status = 2;
		optional string MinReportingInterval = 3;
		optional string Protocols = 4;
		optional string EncodingTypes = 5;
		optional string ParameterWildCardSupported = 6;
		optional string MaxNumberOfProfiles = 7;
		optional string MaxNumberOfParameterReferences = 8;
		optional string ProfileNumberOfEntries = 9;
		message Profile { // 2 // Device.BulkData.Profile.{i}.
			optional string Enable = 1;
			optional string Alias = 2;
			optional string Name = 3;
			optional string NumberOfRetainedFailedReports = 4;
			optional string Protocol = 5;
			optional string EncodingType = 6;
			optional string ReportingInterval = 7;
			optional string TimeReference = 8;
			optional string StreamingHost = 9;
			optional string StreamingPort = 10;
			optional string StreamingSessionID = 11;
			optional string FileTransferURL = 12;
			optional string FileTransferUsername = 13;
			optional string FileTransferPassword = 14;
			optional string ControlFileFormat = 15;
			optional string ParameterNumberOfEntries = 16;
			message Parameter { // 3 // Device.BulkData.Profile.{i}.Parameter.{i}.
				optional string Name = 1;
				optional string Reference = 2;
			} // 3 // Device.BulkData.Profile.{i}.Parameter.{i}.
			repeated Parameter parameter = 18; // 3
			message CSVEncoding { // 3 // Device.BulkData.Profile.{i}.CSVEncoding.
				optional string FieldSeparator = 1;
				optional string RowSeparator = 2;
				optional string EscapeCharacter = 3;
				optional string ReportFormat = 4;
				optional string RowTimestamp = 5;
			} // 3 // Device.BulkData.Profile.{i}.CSVEncoding.
			optional CSVEncoding cSVEncoding = 19; // 3
			message JSONEncoding { // 3 // Device.BulkData.Profile.{i}.JSONEncoding.
				optional string ReportFormat = 1;
				optional string ReportTimestamp = 2;
			} // 3 // Device.BulkData.Profile.{i}.JSONEncoding.
			optional JSONEncoding jSONEncoding = 20; // 3
			message HTTP { // 3 // Device.BulkData.Profile.{i}.HTTP.
				optional string URL = 1;
				optional string Username = 2;
				optional string Password = 3;
				optional string CompressionsSupported = 4;
				optional string Compression = 5;
				optional string MethodsSupported = 6;
				optional string Method = 7;
				optional string UseDateHeader = 8;
				optional string RetryEnable = 9;
				optional string RetryMinimumWaitInterval = 10;
				optional string RetryIntervalMultiplier = 11;
				optional string RequestURIParameterNumberOfEntries = 12;
				message RequestURIParameter { // 4 // Device.BulkData.Profile.{i}.HTTP.RequestURIParameter.{i}.
					optional string Name = 1;
					optional string Reference = 2;
				} // 4 // Device.BulkData.Profile.{i}.HTTP.RequestURIParameter.{i}.
				repeated RequestURIParameter requestURIParameter = 14; // 4
			} // 3 // Device.BulkData.Profile.{i}.HTTP.
			optional HTTP hTTP = 21; // 3
		} // 2 // Device.BulkData.Profile.{i}.
		repeated Profile profile = 11; // 2
	} // 1 // Device.BulkData.
	optional BulkData bulkData = 59; // 1
	message XMPP { // 1 // Device.XMPP.
		optional string ConnectionNumberOfEntries = 1;
		message Connection { // 2 // Device.XMPP.Connection.{i}.
			optional string Enable = 1;
			optional string Alias = 2;
			optional string Username = 3;
			optional string Password = 4;
			optional string Domain = 5;
			optional string Resource = 6;
			optional string JabberID = 7;
			optional string Status = 8;
			optional string LastChangeDate = 9;
			optional string ServerConnectAlgorithm = 10;
			optional string KeepAliveInterval = 11;
			optional string ServerConnectAttempts = 12;
			optional string ServerRetryInitialInterval = 13;
			optional string ServerRetryIntervalMultiplier = 14;
			optional string ServerRetryMaxInterval = 15;
			optional string UseTLS = 16;
			optional string TLSEstablished = 17;
			optional string ServerNumberOfEntries = 18;
			message Server { // 3 // Device.XMPP.Connection.{i}.Server.{i}.
				optional string Enable = 1;
				optional string Alias = 2;
				optional string Priority = 3;
				optional string Weight = 4;
				optional string ServerAddress = 5;
				optional string Port = 6;
			} // 3 // Device.XMPP.Connection.{i}.Server.{i}.
			repeated Server server = 20; // 3
			message Stats { // 3 // Device.XMPP.Connection.{i}.Stats.
				optional string ReceivedMessages = 1;
				optional string TransmittedMessages = 2;
				optional string ReceivedErrorMessages = 3;
				optional string TransmittedErrorMessages = 4;
			} // 3 // Device.XMPP.Connection.{i}.Stats.
			optional Stats stats = 21; // 3
		} // 2 // Device.XMPP.Connection.{i}.
		repeated Connection connection = 3; // 2
	} // 1 // Device.XMPP.
	optional XMPP xMPP = 60; // 1
	message IEEE1905 { // 1 // Device.IEEE1905.
		optional string Version = 1;
		message AL { // 2 // Device.IEEE1905.AL.
			optional string IEEE1905Id = 1;
			optional string Status = 2;
			optional string LastChange = 3;
			optional string LowerLayers = 4;
			optional string RegistrarFreqBand = 5;
			optional string InterfaceNumberOfEntries = 6;
			message Interface { // 3 // Device.IEEE1905.AL.Interface.{i}.
				optional string InterfaceId = 1;
				optional string Status = 2;
				optional string LastChange = 3;
				optional string LowerLayers = 4;
				optional string InterfaceStackReference = 5;
				optional string MediaType = 6;
				optional string GenericPhyOUI = 7;
				optional string GenericPhyVariant = 8;
				optional string GenericPhyURL = 9;
				optional string SetIntfPowerStateEnabled = 10;
				optional string PowerState = 11;
				optional string VendorPropertiesNumberOfEntries = 12;
				optional string LinkNumberOfEntries = 13;
				message VendorProperties { // 4 // Device.IEEE1905.AL.Interface.{i}.VendorProperties.{i}.
					optional string OUI = 1;
					optional string Information = 2;
				} // 4 // Device.IEEE1905.AL.Interface.{i}.VendorProperties.{i}.
				repeated VendorProperties vendorProperties = 15; // 4
				message Link { // 4 // Device.IEEE1905.AL.Interface.{i}.Link.{i}.
					optional string InterfaceId = 1;
					optional string IEEE1905Id = 2;
					optional string MediaType = 3;
					optional string GenericPhyOUI = 4;
					optional string GenericPhyVariant = 5;
					optional string GenericPhyURL = 6;
					message Metric { // 5 // Device.IEEE1905.AL.Interface.{i}.Link.{i}.Metric.
						optional string IEEE802dot1Bridge = 1;
						optional string PacketErrors = 2;
						optional string PacketErrorsReceived = 3;
						optional string TransmittedPackets = 4;
						optional string PacketsReceived = 5;
						optional string MACThroughputCapacity = 6;
						optional string LinkAvailability = 7;
						optional string PHYRate = 8;
						optional string RSSI = 9;
					} // 5 // Device.IEEE1905.AL.Interface.{i}.Link.{i}.Metric.
					optional Metric metric = 8; // 5
				} // 4 // Device.IEEE1905.AL.Interface.{i}.Link.{i}.
				repeated Link link = 16; // 4
			} // 3 // Device.IEEE1905.AL.Interface.{i}.
			repeated Interface interface = 8; // 3
			message ForwardingTable { // 3 // Device.IEEE1905.AL.ForwardingTable.
				optional string SetForwardingEnabled = 1;
				optional string ForwardingRuleNumberOfEntries = 2;
				message ForwardingRule { // 4 // Device.IEEE1905.AL.ForwardingTable.ForwardingRule.{i}.
					optional string InterfaceList = 1;
					optional string MACDestinationAddress = 2;
					optional string MACDestinationAddressFlag = 3;
					optional string MACSourceAddress = 4;
					optional string MACSourceAddressFlag = 5;
					optional string EtherType = 6;
					optional string EtherTypeFlag = 7;
					optional string Vid = 8;
					optional string VidFlag = 9;
					optional string PCP = 10;
					optional string PCPFlag = 11;
				} // 4 // Device.IEEE1905.AL.ForwardingTable.ForwardingRule.{i}.
				repeated ForwardingRule forwardingRule = 4; // 4
			} // 3 // Device.IEEE1905.AL.ForwardingTable.
			optional ForwardingTable forwardingTable = 9; // 3
			message NetworkTopology { // 3 // Device.IEEE1905.AL.NetworkTopology.
				optional string Enable = 1;
				optional string Status = 2;
				optional string MaxChangeLogEntries = 3;
				optional string LastChange = 4;
				optional string IEEE1905DeviceNumberOfEntries = 5;
				optional string ChangeLogNumberOfEntries = 6;
				message ChangeLog { // 4 // Device.IEEE1905.AL.NetworkTopology.ChangeLog.{i}.
					optional string TimeStamp = 1;
					optional string EventType = 2;
					optional string ReporterDeviceId = 3;
					optional string ReporterInterfaceId = 4;
					optional string NeighborType = 5;
					optional string NeighborId = 6;
				} // 4 // Device.IEEE1905.AL.NetworkTopology.ChangeLog.{i}.
				repeated ChangeLog changeLog = 8; // 4
				message IEEE1905Device { // 4 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.
					optional string IEEE1905Id = 1;
					optional string Version = 2;
					optional string RegistrarFreqBand = 3;
					optional string FriendlyName = 4;
					optional string ManufacturerName = 5;
					optional string ManufacturerModel = 6;
					optional string ControlURL = 7;
					optional string VendorPropertiesNumberOfEntries = 8;
					optional string IPv4AddressNumberOfEntries = 9;
					optional string IPv6AddressNumberOfEntries = 10;
					optional string InterfaceNumberOfEntries = 11;
					optional string NonIEEE1905NeighborNumberOfEntries = 12;
					optional string IEEE1905NeighborNumberOfEntries = 13;
					optional string L2NeighborNumberOfEntries = 14;
					optional string BridgingTupleNumberOfEntries = 15;
					message IPv4Address { // 5 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.IPv4Address.{i}.
						optional string MACAddress = 1;
						optional string IPv4Address = 2;
						optional string IPv4AddressType = 3;
						optional string DHCPServer = 4;
					} // 5 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.IPv4Address.{i}.
					repeated IPv4Address iPv4Address = 17; // 5
					message IPv6Address { // 5 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.IPv6Address.{i}.
						optional string MACAddress = 1;
						optional string IPv6Address = 2;
						optional string IPv6AddressType = 3;
						optional string IPv6AddressOrigin = 4;
					} // 5 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.IPv6Address.{i}.
					repeated IPv6Address iPv6Address = 18; // 5
					message VendorProperties { // 5 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.VendorProperties.{i}.
						optional string MessageType = 1;
						optional string OUI = 2;
						optional string Information = 3;
					} // 5 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.VendorProperties.{i}.
					repeated VendorProperties vendorProperties = 19; // 5
					message Interface { // 5 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.Interface.{i}.
						optional string InterfaceId = 1;
						optional string MediaType = 2;
						optional string PowerState = 3;
						optional string GenericPhyOUI = 4;
						optional string GenericPhyVariant = 5;
						optional string GenericPhyURL = 6;
						optional string NetworkMembership = 7;
						optional string Role = 8;
						optional string APChannelBand = 9;
						optional string FrequencyIndex1 = 10;
						optional string FrequencyIndex2 = 11;
					} // 5 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.Interface.{i}.
					repeated Interface interface = 20; // 5
					message NonIEEE1905Neighbor { // 5 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.NonIEEE1905Neighbor.{i}.
						optional string LocalInterface = 1;
						optional string NeighborInterfaceId = 2;
					} // 5 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.NonIEEE1905Neighbor.{i}.
					repeated NonIEEE1905Neighbor nonIEEE1905Neighbor = 21; // 5
					message L2Neighbor { // 5 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.L2Neighbor.{i}.
						optional string LocalInterface = 1;
						optional string NeighborInterfaceId = 2;
						optional string BehindInterfaceIds = 3;
					} // 5 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.L2Neighbor.{i}.
					repeated L2Neighbor l2Neighbor = 22; // 5
					message IEEE1905Neighbor { // 5 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.IEEE1905Neighbor.{i}.
						optional string LocalInterface = 1;
						optional string NeighborDeviceId = 2;
						optional string MetricNumberOfEntries = 3;
						message Metric { // 6 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.IEEE1905Neighbor.{i}.Metric.{i}.
							optional string NeighborMACAddress = 1;
							optional string IEEE802dot1Bridge = 2;
							optional string PacketErrors = 3;
							optional string PacketErrorsReceived = 4;
							optional string TransmittedPackets = 5;
							optional string PacketsReceived = 6;
							optional string MACThroughputCapacity = 7;
							optional string LinkAvailability = 8;
							optional string PHYRate = 9;
							optional string RSSI = 10;
						} // 6 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.IEEE1905Neighbor.{i}.Metric.{i}.
						repeated Metric metric = 5; // 6
					} // 5 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.IEEE1905Neighbor.{i}.
					repeated IEEE1905Neighbor iEEE1905Neighbor = 23; // 5
					message BridgingTuple { // 5 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.BridgingTuple.{i}.
						optional string InterfaceList = 1;
					} // 5 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.BridgingTuple.{i}.
					repeated BridgingTuple bridgingTuple = 24; // 5
				} // 4 // Device.IEEE1905.AL.NetworkTopology.IEEE1905Device.{i}.
				repeated IEEE1905Device iEEE1905Device = 9; // 4
			} // 3 // Device.IEEE1905.AL.NetworkTopology.
			optional NetworkTopology networkTopology = 10; // 3
			message Security { // 3 // Device.IEEE1905.AL.Security.
				optional string SetupMethod = 1;
				optional string Password = 2;
			} // 3 // Device.IEEE1905.AL.Security.
			optional Security security = 11; // 3
			message NetworkingRegistrar { // 3 // Device.IEEE1905.AL.NetworkingRegistrar.
				optional string Registrar2dot4 = 1;
				optional string Registrar5 = 2;
				optional string Registrar60 = 3;
			} // 3 // Device.IEEE1905.AL.NetworkingRegistrar.
			optional NetworkingRegistrar networkingRegistrar = 12; // 3
		} // 2 // Device.IEEE1905.AL.
		optional AL aL = 3; // 2
	} // 1 // Device.IEEE1905.
	optional IEEE1905 iEEE1905 = 61; // 1
	message MQTT { // 1 // Device.MQTT.
		optional string ClientNumberOfEntries = 1;
		optional string BrokerNumberOfEntries = 2;
		message Capabilities { // 2 // Device.MQTT.Capabilities.
			optional string ProtocolVersionsSupported = 1;
			optional string TransportProtocolSupported = 2;
			optional string MaxNumberOfClientSubscriptions = 3;
			optional string MaxNumberOfBrokerBridges = 4;
			optional string MaxNumberOfBrokerBridgeSubscriptions = 5;
		} // 2 // Device.MQTT.Capabilities.
		optional Capabilities capabilities = 4; // 2
		message Client { // 2 // Device.MQTT.Client.{i}.
			optional string Alias = 1;
			optional string Name = 2;
			optional string Enable = 3;
			optional string Status = 4;
			optional string ClientID = 5;
			optional string Username = 6;
			optional string Password = 7;
			optional string TransportProtocol = 8;
			optional string ProtocolVersion = 9;
			optional string CleanSession = 10;
			optional string MessageRetryTime = 11;
			optional string ConnectRetryTime = 12;
			optional string KeepAliveTime = 13;
			optional string ForceReconnect = 14;
			optional string BrokerAddress = 15;
			optional string BrokerPort = 16;
			optional string WillEnable = 17;
			optional string WillTopic = 18;
			optional string WillValue = 19;
			optional string WillQoS = 20;
			optional string WillRetain = 21;
			optional string SubscriptionNumberOfEntries = 22;
			message Subscription { // 3 // Device.MQTT.Client.{i}.Subscription.{i}.
				optional string Alias = 1;
				optional string Enable = 2;
				optional string Status = 3;
				optional string Topic = 4;
				optional string QoS = 5;
			} // 3 // Device.MQTT.Client.{i}.Subscription.{i}.
			repeated Subscription subscription = 24; // 3
			message Stats { // 3 // Device.MQTT.Client.{i}.Stats.
				optional string BrokerConnectionEstablished = 1;
				optional string LastPublishMessageSent = 2;
				optional string LastPublishMessageReceived = 3;
				optional string PublishSent = 4;
				optional string PublishReceived = 5;
				optional string SubscribeSent = 6;
				optional string UnSubscribeSent = 7;
				optional string MQTTMessagesSent = 8;
				optional string MQTTMessagesReceived = 9;
				optional string ConnectionErrors = 10;
				optional string PublishErrors = 11;
			} // 3 // Device.MQTT.Client.{i}.Stats.
			optional Stats stats = 25; // 3
		} // 2 // Device.MQTT.Client.{i}.
		repeated Client client = 5; // 2
		message Broker { // 2 // Device.MQTT.Broker.{i}.
			optional string Alias = 1;
			optional string Name = 2;
			optional string Enable = 3;
			optional string Status = 4;
			optional string Port = 5;
			optional string Interface = 6;
			optional string Username = 7;
			optional string Password = 8;
			optional string BridgeNumberOfEntries = 9;
			message Bridge { // 3 // Device.MQTT.Broker.{i}.Bridge.{i}.
				optional string Alias = 1;
				optional string Name = 2;
				optional string Enable = 3;
				optional string Status = 4;
				optional string ClientID = 5;
				optional string Username = 6;
				optional string Password = 7;
				optional string TransportProtocol = 8;
				optional string ProtocolVersion = 9;
				optional string CleanSession = 10;
				optional string MessageRetryTime = 11;
				optional string ConnectRetryTime = 12;
				optional string KeepAliveTime = 13;
				optional string ForceReconnect = 14;
				optional string ServerSelectionAlgorithm = 15;
				optional string ServerConnection = 16;
				optional string ServerNumberOfEntries = 17;
				optional string SubscriptionNumberOfEntries = 18;
				message Server { // 4 // Device.MQTT.Broker.{i}.Bridge.{i}.Server.{i}.
					optional string Enable = 1;
					optional string Alias = 2;
					optional string Priority = 3;
					optional string Weight = 4;
					optional string Address = 5;
					optional string Port = 6;
				} // 4 // Device.MQTT.Broker.{i}.Bridge.{i}.Server.{i}.
				repeated Server server = 20; // 4
				message Subscription { // 4 // Device.MQTT.Broker.{i}.Bridge.{i}.Subscription.{i}.
					optional string Alias = 1;
					optional string Enable = 2;
					optional string Status = 3;
					optional string Topic = 4;
					optional string Direction = 5;
					optional string QoS = 6;
					optional string LocalPrefix = 7;
					optional string RemotePrefix = 8;
				} // 4 // Device.MQTT.Broker.{i}.Bridge.{i}.Subscription.{i}.
				repeated Subscription subscription = 21; // 4
			} // 3 // Device.MQTT.Broker.{i}.Bridge.{i}.
			repeated Bridge bridge = 11; // 3
			message Stats { // 3 // Device.MQTT.Broker.{i}.Stats.
				optional string TotalNumberOfClients = 1;
				optional string NumberOfActiveClients = 2;
				optional string NumberOfInactiveClients = 3;
				optional string Subscriptions = 4;
				optional string PublishSent = 5;
				optional string PublishReceived = 6;
				optional string MQTTMessagesSent = 7;
				optional string MQTTMessagesReceived = 8;
				optional string ConnectionErrors = 9;
				optional string PublishErrors = 10;
			} // 3 // Device.MQTT.Broker.{i}.Stats.
			optional Stats stats = 12; // 3
		} // 2 // Device.MQTT.Broker.{i}.
		repeated Broker broker = 6; // 2
	} // 1 // Device.MQTT.
	optional MQTT mQTT = 62; // 1
	message DynamicDNS { // 1 // Device.DynamicDNS.
		optional string ClientNumberOfEntries = 1;
		optional string ServerNumberOfEntries = 2;
		optional string SupportedServices = 3;
		message Client { // 2 // Device.DynamicDNS.Client.{i}.
			optional string Enable = 1;
			optional string Status = 2;
			optional string Alias = 3;
			optional string LastError = 4;
			optional string Server = 5;
			optional string Interface = 6;
			optional string Username = 7;
			optional string Password = 8;
			optional string HostnameNumberOfEntries = 9;
			message Hostname { // 3 // Device.DynamicDNS.Client.{i}.Hostname.{i}.
				optional string Enable = 1;
				optional string Status = 2;
				optional string Name = 3;
				optional string LastUpdate = 4;
			} // 3 // Device.DynamicDNS.Client.{i}.Hostname.{i}.
			repeated Hostname hostname = 11; // 3
		} // 2 // Device.DynamicDNS.Client.{i}.
		repeated Client client = 5; // 2
		message Server { // 2 // Device.DynamicDNS.Server.{i}.
			optional string Enable = 1;
			optional string Name = 2;
			optional string Alias = 3;
			optional string ServiceName = 4;
			optional string ServerAddress = 5;
			optional string ServerPort = 6;
			optional string SupportedProtocols = 7;
			optional string Protocol = 8;
			optional string CheckInterval = 9;
			optional string RetryInterval = 10;
			optional string MaxRetries = 11;
		} // 2 // Device.DynamicDNS.Server.{i}.
		repeated Server server = 6; // 2
	} // 1 // Device.DynamicDNS.
	optional DynamicDNS dynamicDNS = 63; // 1
} // Device
